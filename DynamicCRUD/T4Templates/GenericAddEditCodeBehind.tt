﻿<#@ template debug="true" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Components;
using System.Net.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Components.Routing;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.Web.Virtualization;
using Microsoft.JSInterop;
<#           if (UseBlazored) {#>
using Blazored.Modal;
using Blazored.Modal.Services;
using Blazored.Toast;
using Blazored.Toast.Services;
<#           }#>
using System.Security.Claims;
using Microsoft.Extensions.Logging;
using <#=DTONamespaceName#>.DTOs;
using <#=DataServiceNamespace#>.Services;

using System.Threading.Tasks;
<# if (UseRadzen) { #>
using Radzen.Blazor;
<# } #>

namespace <#=Namespace#>.Pages;

public partial class <#= ModelName #>AddEdit : ComponentBase
{
<#           if (!UseBlazored) {#>
        [Parameter] public EventCallback<bool> CloseModal { get; set; } 
<#           } else {#>
        [Inject] public required IToastService ToastService { get; set; }
        [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
<#           }#>
        [Parameter] public string? Title { get; set; }
        [Inject] public required ILogger<<#=ModelName#>AddEdit> Logger { get; set; }
        [Inject] public required IJSRuntime JSRuntime { get; set; }
        [Parameter] public <#=PrimaryKeyDataType#>? <#=PrimaryKeyName#> { get; set; }
        [Inject] public required NavigationManager NavigationManager { get; set; }
<#
	if (!string.IsNullOrEmpty(ForeignKeyName)) {
#>      [Parameter] public <#=ForeignKeyDataType#> <#=ForeignKeyName#> { get; set; }
<#	} #>
        public <#=ModelName#>DTO <#=ModelName#>DTO { get; set; } = new <#=ModelName#>DTO();//{ };
        [Inject] public required I<#=ModelName#>DataService <#=ModelName#>DataService { get; set; }
<#           if (!UseBlazored) {#>
        [Inject] public required ApplicationState ApplicationState { get; set; }
<#           }#>
        [Parameter] public int ParentId { get; set; }

<# if (UseRadzen) { #>
    RadzenTextBox? FirstInput;
<# } else { #>
    ElementReference? FirstInput;
<# } #>
    private bool isSubmitting;
    private  string Message { get; set; }=string.Empty;
    private string MessageType { get; set; }=string.Empty;
    protected override async Task OnInitializedAsync()
    {
<#          if (PrimaryKeyDataType=="int") {
#>
            if (<#=PrimaryKeyName#> != null && <#=PrimaryKeyName#> != 0)
            {
                var result = await <#=ModelName#>DataService.Get<#=ModelName#>ById((int)<#=PrimaryKeyName#>);
                if (result != null)
                {
                    <#=ModelName#>DTO = result;
                }
<#          } else if (PrimaryKeyDataType=="bigint") {
#>
            if (<#=PrimaryKeyName#> != null && <#=PrimaryKeyName#> != 0)
            {
                var result = await <#=ModelName#>DataService.Get<#=ModelName#>ById((long)<#=PrimaryKeyName#>);
                if (result != null)
                {
                    <#=ModelName#>DTO = result;
                }
<#          } else {
#>
            if (<#=PrimaryKeyName#>!= null )
            {
                var result = await <#=ModelName#>DataService.Get<#=ModelName#>ById((string)<#=PrimaryKeyName#>);
                if (result != null)
                {
                    <#=ModelName#>DTO = result;
                }
<#          }
#>
            }
            else
            {
<#          if (!string.IsNullOrEmpty(ForeignKeyName)) {
#>			
                <#=ModelName#>DTO.<#=ForeignKeyName#> = <#=ForeignKeyName#>;
<#          } #>
            }
    }
<# if (!UseRadzen) { #>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await Task.Delay(100);
                if (FirstInput != null)
                {
                    await FirstInput.Value.FocusAsync();
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
    }
<# } else { #>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (FirstInput != null)
            {
                await FirstInput.FocusAsync();
            }
        }
    }
<# } #>

<# if (UseBlazored) { #>
    public async Task CloseAsync()
    {
        if (ModalInstance != null)
            await ModalInstance.CancelAsync();
    }
<# } else { #>
    public async Task CloseAsync()
    {
        await CloseModal.InvokeAsync(true);
    }
<# } #>

    protected async Task HandleValidSubmit()
    {
<# if (!UseBlazored) { #>
        if (ApplicationState == null)
        {
            return;
        }
<# } #>
        isSubmitting = true;
<# if (PrimaryKeyDataType == "int") { #>
        if ((<#= PrimaryKeyName #> == 0 || <#= PrimaryKeyName #> == null))
<# } else { #>
        if ((string.IsNullOrWhiteSpace(<#= PrimaryKeyName #>) || <#= PrimaryKeyName #> == null))
<# } #>
        {
            string result = await <#= ModelName #>DataService.Add<#= ModelName #>(<#= ModelName #>DTO);
            if (result == null || result.ToLower().Contains("success") == false)
            {
                Logger.LogError($"Error adding record {result}");
                Message = result ?? "Error adding record";
                MessageType = "danger";
            }
            else
            {
                Message = result ?? "Record added successfully";
                MessageType = "success";
                <# if (!UseBlazored) {#>
                await CloseModal.InvokeAsync(true);
                <# } #>
                NavigationManager.NavigateTo("/<#= ModelName #>s");
            }
        }
        else
        {
            string updateResult = await <#= ModelName #>DataService.Update<#= ModelName #>(<#= ModelName #>DTO,"TBC");
            if (updateResult == null || updateResult.ToLower().Contains("success") == false)
            {
                Logger.LogError($"Error updating record {updateResult}");
                Message = updateResult ?? "Error updating record";
                MessageType = "danger";
            }
            else
            {
                Message = updateResult ?? "Record updated successfully";
                MessageType = "success";
                <# if (!UseBlazored) {#>
                await CloseModal.InvokeAsync(true);
                <# } #>
                NavigationManager.NavigateTo("/<#= ModelName #>s");
            }            
        }
        isSubmitting = false;
    }
    private void HideMessage()
    {
        ApplicationState.Message = "";
    }
}