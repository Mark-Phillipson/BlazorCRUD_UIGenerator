<#@ template debug="true" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using System.Net.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Components.Routing;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.Web.Virtualization;
using Microsoft.JSInterop;
<#           if (UseBlazored) {#>
using Blazored.Modal;
using Blazored.Modal.Services;
using Blazored.Toast;
using Blazored.Toast.Services;
<#           }#>
using System.Security.Claims;
using <#=Namespace#>.DTOs;
using <#=Namespace#>.Services;

namespace <#=Namespace#>.Pages
{
    public partial class <#=ModelName#>AddEdit : ComponentBase
    {
<#           if (!UseBlazored) {#>
        [Parameter] public EventCallback<bool> CloseModal { get; set; } 
<#           } else {#>
        [Inject] IToastService? ToastService { get; set; }
        [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
<#           }#>
        [Parameter] public string? Title { get; set; }
        [Inject] public ILogger<<#=ModelName#>AddEdit>? Logger { get; set; }
        [Inject] public IJSRuntime? JSRuntime { get; set; }
        [Parameter] public <#=PrimaryKeyDataType#>? <#=PrimaryKeyName#> { get; set; }
<#
	if (!string.IsNullOrEmpty(ForeignKeyName)) {
#>      [Parameter] public <#=ForeignKeyDataType#> <#=ForeignKeyName#> { get; set; }
<#	} #>
        public <#=ModelName#>DTO <#=ModelName#>DTO { get; set; } = new <#=ModelName#>DTO();//{ };
        [Inject] public I<#=ModelName#>DataService? <#=ModelName#>DataService { get; set; }
        [Inject] public ApplicationState? ApplicationState { get; set; }
        [Parameter] public int ParentId { get; set; }
#pragma warning disable 414, 649
        bool TaskRunning = false;
#pragma warning restore 414, 649
        protected override async Task OnInitializedAsync()
        {
            if (<#=ModelName#>DataService == null)
            {
                return;
            }
<#          if (PrimaryKeyDataType=="int") {
#>
            if (<#=PrimaryKeyName#> > 0)
            {
                var result = await <#=ModelName#>DataService.Get<#=ModelName#>ById((int)<#=PrimaryKeyName#>);
                if (result != null)
                {
                    <#=ModelName#>DTO = result;
                }
<#          else if (PrimaryKeyDataType=="bigint") {
#>
            if (<#=PrimaryKeyName#> > 0)
            {
                var result = await <#=ModelName#>DataService.Get<#=ModelName#>ById((long)<#=PrimaryKeyName#>);
                if (result != null)
                {
                    <#=ModelName#>DTO = result;
                }
<#          } else {
#>
            if (<#=PrimaryKeyName#>!= null )
            {
                var result = await <#=ModelName#>DataService.Get<#=ModelName#>ById((string)<#=PrimaryKeyName#>);
                if (result != null)
                {
                    <#=ModelName#>DTO = result;
                }
<#          }
#>
            }
            else
            {
<#          if (!string.IsNullOrEmpty(ForeignKeyName)) {
#>			
                <#=ModelName#>DTO.<#=ForeignKeyName#> = <#=ForeignKeyName#>;
<#          } #>
            }
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                try
                {
                    if (JSRuntime != null)
                    {
                        await JSRuntime.InvokeVoidAsync("window.setFocus", "<#=DefaultSortColumn#>");
                    }
                }
                catch (Exception exception)
                {
                    Console.WriteLine(exception.Message);
                }
            }
        }
<#           if (UseBlazored) {#>
        public async Task CloseAsync()
        {
              if (ModalInstance != null)
                  await ModalInstance.CancelAsync();
        }
<#           }#>
<#           if (!UseBlazored) {#>
        public async Task CloseAsync()
        {
              await CloseModal.InvokeAsync(true);
        }
<#           }#>
        protected async Task HandleValidSubmit()
        {
<#           if (!UseBlazored) {#>
            if (ApplicationState== null )
            {
                return;
            }
<#           }#>
            TaskRunning = true;
<#          if (PrimaryKeyDataType=="int") {
#>
            if ((<#=PrimaryKeyName#> == 0 || <#=PrimaryKeyName#> == null) && <#=ModelName#>DataService != null)
<#          } else {
#>
            if ((string.IsNullOrWhiteSpace(<#=PrimaryKeyName#>) || <#=PrimaryKeyName#> == null) && <#=ModelName#>DataService != null)
<#          }
#>
            {
                <#=ModelName#>DTO? result = await <#=ModelName#>DataService.Add<#=ModelName#>(<#=ModelName#>DTO);
                if (result == null && Logger!= null)
                {
                    Logger.LogError("<#=ModelNameWithSpaces#> failed to add, please investigate Error Adding New <#=ModelNameWithSpaces#>");
<#           if (UseBlazored) {#>
                    ToastService?.ShowError("<#=ModelNameWithSpaces#> failed to add, please investigate Error Adding New <#=ModelNameWithSpaces#>");
<#           } else {#>
                    ApplicationState.Message = "<#=ModelNameWithSpaces#> failed to add, please investigate Error Adding New <#=ModelNameWithSpaces#>";
                    ApplicationState.MessageType = "danger";
<#           }#>
                    return;
                }
<#           if (UseBlazored) {#>
                ToastService?.ShowSuccess("<#=ModelNameWithSpaces#> added successfully", "SUCCESS");
<#           } else {#>
                ApplicationState.Message = "<#=ModelNameWithSpaces#> Added successfully";
                ApplicationState.MessageType = "success";
<#           }#>
            }
            else
            {
                if (<#=ModelName#>DataService != null)
                {
                    await <#=ModelName#>DataService!.Update<#=ModelName#>(<#=ModelName#>DTO, "");
<#           if (UseBlazored) {#>
                    ToastService?.ShowSuccess("The <#=ModelNameWithSpaces#> updated successfully", "SUCCESS");
<#           } else {#>
                    ApplicationState.Message="The <#=ModelNameWithSpaces#> updated successfully";
                    ApplicationState.MessageType = "success";
<#           }#>
                }
            }
<#          if (UseBlazored) {#>
            if (ModalInstance != null)
            {
                await ModalInstance.CloseAsync(ModalResult.Ok(true));
            }
<#          } else {#>
            await CloseModal.InvokeAsync(true);
<#          }#>
            TaskRunning = false;
        }
    }
}