<#@ template debug="true" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using System.Net.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Components.Routing;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.Web.Virtualization;
using Microsoft.JSInterop;
using Blazored.Modal;
using Blazored.Modal.Services;
using Blazored.Toast;
using Blazored.Toast.Services;
using System.Security.Claims;
using Ardalis.GuardClauses;
using BostonAcademic.Client.Shared;

namespace <#=Namespace#>
{
    public partial class <#=ModelName#>Table
    {
        [Inject] public I<#=ModelName#>DataService? <#=ModelName#>DataService { get; set; }
        [Inject] public NavigationManager? NavigationManager { get; set; }
        [Inject] public ILogger<<#=ModelName#>Table>? Logger { get; set; }
        [Inject] public IToastService? ToastService { get; set; }
        [CascadingParameter] public IModalService? Modal { get; set; }
        public string Title { get; set; } = "<#=ModelName#> Items (<#=PluralTablename#>)";
        public List<<#=ModelName#>DTO>? <#=ModelName#>DTO { get; set; }
        public List<<#=ModelName#>DTO>? Filtered<#=ModelName#>DTO { get; set; }
        protected <#=ModelName#>AddEdit? <#=ModelName#>AddEdit { get; set; }
        ElementReference SearchInput;
#pragma warning disable 414, 649
        private bool _loadFailed = false;
        private string? searchTerm = null;
#pragma warning restore 414, 649
        public string? SearchTerm { get => searchTerm; set { searchTerm = value; ApplyFilter(); } }
        public string ExceptionMessage { get; set; } = String.Empty;
        public List<string>? PropertyInfo { get; set; }
        [CascadingParameter] public ClaimsPrincipal? User { get; set; }
        [Inject] public IJSRuntime? JSRuntime { get; set; }
        protected override async Task OnInitializedAsync()
        {
            await LoadData();
        }

        private async Task LoadData()
        {
            try
            {
                if (User?.Identity?.Name != null && <#=ModelName#>DataService != null)
                {
                    var result = (await <#=ModelName#>DataService.GetAll<#=PluralTablename#>Async());

                    if (result != null)
                    {
                        <#=ModelName#>DTO = result.ToList();
                    }
                }

            }
            catch (Exception e)
            {
                Logger?.LogError("Exception occurred in LoadData Method, Getting Records from the Service", e);
                _loadFailed = true;
                ExceptionMessage = e.Message;
            }
            Filtered<#=ModelName#>DTO = <#=ModelName#>DTO;
            Title = $"<#=ModelName#> ({Filtered<#=ModelName#>DTO?.Count})";

        }
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                try
                {
                    if (JSRuntime!= null )
                    {
                        await JSRuntime.InvokeVoidAsync("window.setFocus", "SearchInput");
                    }
                }
                catch (Exception exception)
                {
                    Console.WriteLine(exception.Message);
                }
            }
        }


        protected async Task AddNew<#=ModelName#>Async()
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(User), User);
            //parameters.Add(nameof(ParentId), ParentId);
            var formModal = Modal?.Show<<#=ModelName#>AddEdit>("Add <#=ModelName#>", parameters);
            if (formModal != null)
            {
                var result = await formModal.Result;
                if (!result.Cancelled)
                {
                    await LoadData();
                }
            }
        }
        private void ApplyFilter()
        {
            if (Filtered<#=ModelName#>DTO == null || <#=ModelName#>DTO == null)
            {
                return;
            }
            if (string.IsNullOrEmpty(SearchTerm))
            {
                Filtered<#=ModelName#>DTO = <#=ModelName#>DTO.OrderBy(v => v.<#=DefaultSortColumn#>).ToList();
                Title = $"All <#=PluralTablename#> ({Filtered<#=ModelName#>DTO.Count})";
            }
            else
            {
                var temporary = SearchTerm.ToLower().Trim();
                Filtered<#=ModelName#>DTO = <#=ModelName#>DTO
                    .Where(v => 
<# 
            var counter=0;
            foreach (var property in DatabaseColumns.Where(v => v.Filter==true))  {
                counter++;
#>
<#
                if (counter==1) {
#>
                    (v.<#=property.PropertyName#>!= null  && v.<#=property.PropertyName#>.ToLower().Contains(temporary))
<#              } else {
#>
                     || (v.<#=property.PropertyName#>!= null  &&  v.<#=property.PropertyName#>.ToLower().Contains(temporary))
<#              }
            }
#>                    )
                    .ToList();
                Title = $"Filtered <#=ModelName#>s ({Filtered<#=ModelName#>DTO.Count})";
            }
        }
        protected void Sort<#=ModelName#>(string sortColumn)
        {
            Guard.Against.Null(sortColumn, nameof(sortColumn));
                        if (Filtered<#=ModelName#>DTO == null)
            {
                return;
            }
<# 
            foreach (var property in DatabaseColumns.Where(v => v.Sort==true))  {
#>
            if (sortColumn == "<#=property.PropertyName#>")
            {
                Filtered<#=ModelName#>DTO = Filtered<#=ModelName#>DTO.OrderBy(v => v.<#=property.PropertyName#>).ToList();
            }
            else if (sortColumn == "<#=property.PropertyName#> Desc")
            {
                Filtered<#=ModelName#>DTO = Filtered<#=ModelName#>DTO.OrderByDescending(v => v.<#=property.PropertyName#>).ToList();
            }
<#          }
#>
        }

        async Task Delete<#=ModelName#>Async(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            //Optionally remove child records here or warn about their existence
            //var companies = await CompanyDataService.GetAll<#=ModelName#>(<#=PrimaryKeyName#>);
            //if (companies != null)
            //{
            //	ToastService.ShowWarning($"It is not possible to delete a <#=ModelNameCamelCase#> that is linked to one or more companies! You would have to delete the companys first. {companies.Count()}");
            //	return;
            //}
            var parameters = new ModalParameters();
            if (<#=ModelName#>DataService != null)
            {
                var <#=ModelNameCamelCase#> = await <#=ModelName#>DataService.Get<#=ModelName#>ById(<#=PrimaryKeyName#>);
                parameters.Add("Title", "Please Confirm, Delete <#=ModelName#>");
                parameters.Add("Message", $"<#=DefaultSortColumn#>: {<#=ModelNameCamelCase#>?.<#=DefaultSortColumn#>}");
                parameters.Add("ButtonColour", "danger");
                parameters.Add("Icon", "fa fa-trash");
                var formModal = Modal?.Show<BlazoredModalConfirmDialog>($"Delete  <#=ModelName#> ({<#=ModelNameCamelCase#>?.<#=DefaultSortColumn#>})?", parameters);
                if (formModal != null)
                {
                    var result = await formModal.Result;
                    if (!result.Cancelled)
                    {
                        await <#=ModelName#>DataService.Delete<#=ModelName#>(<#=PrimaryKeyName#>);
                        ToastService?.ShowSuccess(" <#=ModelName#> deleted successfully", "SUCCESS");
                        await LoadData();
                    }
                }
            }
        }
        async Task Edit<#=ModelName#>Async(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            var parameters = new ModalParameters();
            parameters.Add("<#=PrimaryKeyName#>", <#=PrimaryKeyName#>);
            parameters.Add(nameof(User), User);
            var formModal = Modal?.Show<<#=ModelName#>AddEdit>("Edit <#=ModelName#>", parameters);
            if (formModal != null)
            {
                var result = await formModal.Result;
                if (!result.Cancelled)
                {
                    await LoadData();
                }
            }
        }
    }
}