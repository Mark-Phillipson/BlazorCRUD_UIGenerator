<#@ template debug="true" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using System.Net.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Components.Routing;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.Web.Virtualization;
using Microsoft.JSInterop;
using Blazored.Modal;
using Blazored.Modal.Services;
using Blazored.Toast;
using Blazored.Toast.Services;
using System.Security.Claims;
using Ardalis.GuardClauses;
//using <#=Namespace#>.Shared;
using <#=Namespace#>.Services;
using <#=Namespace#>.DTOs;

namespace <#=Namespace#>.Pages
{
    public partial class <#=ModelName#>Table : ComponentBase
    {
        [Inject] public required I<#=ModelName#>DataService <#=ModelName#>DataService { get; set; }
        [Inject] public required  NavigationManager NavigationManager { get; set; }
        [Inject] public ILogger<<#=ModelName#>Table>? Logger { get; set; }
<#      if (UseBlazored) {#>        
        [Inject] public required IToastService ToastService { get; set; }
        [CascadingParameter] public IModalService? Modal { get; set; }
<#      }else {#>        
        [Inject] public required ApplicationState ApplicationState { get; set; }
<#      }#>
        public string Title { get; set; } = "<#=ModelName#> Items (<#=PluralTablename#>)";
        public string EditTitle { get; set; } = "Edit <#=ModelName#> Item (<#=PluralTablename#>)";
<#      if (!string.IsNullOrEmpty(ForeignKeyName)) {#>		
        [Parameter] public <#=ForeignKeyDataType#> <#=ForeignKeyName#> { get; set; }
<#      }#>
        [Parameter] public int ParentId { get; set; }
        public List<<#=ModelName#>DTO>? <#=ModelName#>DTO { get; set; }
        public List<<#=ModelName#>DTO>? Filtered<#=ModelName#>DTO { get; set; }
        protected <#=ModelName#>AddEdit? <#=ModelName#>AddEdit { get; set; }
        ElementReference SearchInput;
#pragma warning disable 414, 649
        private bool _loadFailed = false;
        private string? searchTerm = null;
#pragma warning restore 414, 649
        public string? SearchTerm { get => searchTerm; set { searchTerm = value; } }
        private string? clientSearchedTerm { get; set; }
        public string? ClientSearchTerm { get => clientSearchedTerm; set { clientSearchedTerm = value; ApplyLocalFilter(); } }
        private bool _serverPaging = false;
        private void ApplyLocalFilter()
        {
            if (Filtered<#=ModelName#>DTO == null || <#=ModelName#>DTO == null)
            {
                return;
            }
            if (string.IsNullOrEmpty(ClientSearchTerm))
            {
                Filtered<#=ModelName#>DTO = <#=ModelName#>DTO;
            }
            else
            {
                Filtered<#=ModelName#>DTO = <#=ModelName#>DTO.Where(v =>
<# 
            var counter=0;
            foreach (var property in DatabaseColumns.Where(v => v.Filter==true))  {
                counter++;
#>
<#
                if (counter==1) {
#>
                    (v.<#=property.PropertyName#>!= null  && v.<#=property.PropertyName#>.ToLower().Contains(ClientSearchTerm))
<#              } else {
#>
                     || (v.<#=property.PropertyName#>!= null  &&  v.<#=property.PropertyName#>.ToLower().Contains(ClientSearchTerm))
<#              }
            }
#>                    
                ).ToList();
            }
            Title = $"<#=ModelName#> ({Filtered<#=ModelName#>DTO.Count})";
        }

        private string? lastSearchTerm { get; set; }

        [Parameter] public string? ServerSearchTerm { get; set; }
        public string ExceptionMessage { get; set; } = String.Empty;
        public List<string>? PropertyInfo { get; set; }
        [CascadingParameter] public ClaimsPrincipal? User { get; set; }
        [Inject] public IJSRuntime? JSRuntime { get; set; }
        public bool ShowEdit { get; set; } = false;
        private bool ShowDeleteConfirm { get; set; }
        private int pageNumber = 1;
        private int pageSize = 1000;
        private int totalRows = 0;
    
        private <#=PrimaryKeyDataType#> <#=ModelName#>Id  { get; set; }
        private <#=ModelName#>DTO? current<#=ModelName#> { get; set; }
        private string message { get; set; }
        protected override async Task OnInitializedAsync()
        {
            await LoadData();
        }

        private async Task LoadData()
        {
            try
            {
                if (<#=ModelName#>DataService != null)
                {
                    ServerSearchTerm = SearchTerm;
                    totalRows = await <#=ModelName#>DataService.GetTotalCount();
                    var result = await <#=ModelName#>DataService!.GetAll<#=PluralTablename#>Async
<#                    if (!string.IsNullOrEmpty(ForeignKeyName)) {#>
                    (<#=ForeignKeyName#>,pageNumber,pageSize,ServerSearchTerm);
<#                    } else {#>                    
                    (pageNumber,pageSize,ServerSearchTerm);
<#                    }#>
                    //var result = await <#=ModelName#>DataService.Search<#=PluralTablename#>Async(ServerSearchTerm);
                    if (result != null)
                    {
                        <#=ModelName#>DTO = result.ToList();
                        Filtered<#=ModelName#>DTO = result.ToList();
                        StateHasChanged();
                    }
                }
            }
            catch (Exception e)
            {
                Logger?.LogError("e, Exception occurred in LoadData Method, Getting Records from the Service");
                _loadFailed = true;
                ExceptionMessage = e.Message;
            }
            Filtered<#=ModelName#>DTO = <#=ModelName#>DTO;
            Title = $"<#=ModelNameWithSpaces#> ({Filtered<#=ModelName#>DTO?.Count})";

        }
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                try
                {
                    await Task.Delay(100);
                    await SearchInput.FocusAsync();
                }
                catch (Exception exception)
                {
                    Console.WriteLine(exception.Message);
                }
            }
        }
<#           if (UseBlazored) {#>
        private async Task AddNew<#=ModelName#>()
        {
              var parameters = new ModalParameters();
<#           if (!string.IsNullOrEmpty(ForeignKeyName)) {#>			
              parameters.Add(nameof(<#=ForeignKeyName#>), <#=ForeignKeyName#>);
<#           }#>
              var formModal = Modal?.Show<<#=ModelName#>AddEdit>("Add <#=ModelNameWithSpaces#>", parameters);
              if (formModal != null)
              {
                  var result = await formModal.Result;
                  if (!result.Cancelled)
                  {
                    await LoadData();
                    if (searchTerm!=null)
                    {
                        ApplyFilter();
                    }
                  }
              }
              <#=ModelName#>Id=0;
        }
<#           }#>

<#           if (!UseBlazored) {#>
        private void AddNew<#=ModelName#>()
        {
            EditTitle = "Add <#=ModelNameWithSpaces#>";
            <#=ModelName#>Id=0;
            ShowEdit = true;
        }
<#           }#>

        private async Task ApplyFilter()
        {
            if (Filtered<#=ModelName#>DTO == null || <#=ModelName#>DTO == null)
            {
                return;
            }
            if (string.IsNullOrEmpty(SearchTerm))
            {
                await LoadData();
                Title = $"All <#=ModelNameWithSpaces#> ({Filtered<#=ModelName#>DTO.Count})";
            }
            else
            {
                if (lastSearchTerm != SearchTerm)
                {
                    await LoadData();
                }

            }
            lastSearchTerm = SearchTerm;
        }
        protected void Sort<#=ModelName#>(string sortColumn)
        {
            Guard.Against.Null(sortColumn, nameof(sortColumn));
                        if (Filtered<#=ModelName#>DTO == null)
            {
                return;
            }
<# 
            foreach (var property in DatabaseColumns.Where(v => v.Sort==true))  {
#>
            if (sortColumn == "<#=property.PropertyName#>")
            {
                Filtered<#=ModelName#>DTO = Filtered<#=ModelName#>DTO.OrderBy(v => v.<#=property.PropertyName#>).ToList();
            }
            else if (sortColumn == "<#=property.PropertyName#> Desc")
            {
                Filtered<#=ModelName#>DTO = Filtered<#=ModelName#>DTO.OrderByDescending(v => v.<#=property.PropertyName#>).ToList();
            }
<#          }
#>
        }
<#           if (UseBlazored) {#>
        private async Task Delete<#=ModelName#>(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            //TODO Optionally remove child records here or warn about their existence
              var parameters = new ModalParameters();
              if (<#=ModelName#>DataService != null)
              {
                  var <#=ModelNameCamelCase#> = await <#=ModelName#>DataService.Get<#=ModelName#>ById(<#=PrimaryKeyName#>);
                  parameters.Add("Title", "Please Confirm, Delete <#=ModelNameWithSpaces#>");
                  parameters.Add("Message", $"<#=DefaultSortColumn#>: {<#=ModelNameCamelCase#>?.<#=DefaultSortColumn#>}");
                  parameters.Add("ButtonColour", "danger");
                  parameters.Add("Icon", "fa fa-trash");
                  var formModal = Modal?.Show<BlazoredModalConfirmDialog>($"Delete <#=ModelNameWithSpaces#> ({<#=ModelNameCamelCase#>?.<#=DefaultSortColumn#>})?", parameters);
                  if (formModal != null)
                  {
                      var result = await formModal.Result;
                      if (!result.Cancelled)
                      {
                          await <#=ModelName#>DataService.Delete<#=ModelName#>(<#=PrimaryKeyName#>);
                          ToastService?.ShowSuccess("<#=ModelNameWithSpaces#> deleted successfully");
                          await LoadData();
                          if (searchTerm!=null)
                          {
                              ApplyFilter();
                          }
                      }
                  }
             }
             <#=ModelName#>Id = <#=PrimaryKeyName#>;
        }
<#           }#>                  
<#           if (!UseBlazored) {#>               
        private void Delete<#=ModelName#>(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            <#=ModelName#>Id = <#=PrimaryKeyName#>;
            current<#=ModelName#> = Filtered<#=ModelName#>DTO?.FirstOrDefault(v => v.Id == Id);
            message = $"Are you sure you want to delete {current<#=ModelName#>?.<#=PrimaryKeyName#>} <#=ModelName#> item?";
            ShowDeleteConfirm=true;
        }
<#           }#>
<#           if (UseBlazored) {#>
        private async void Edit<#=ModelName#>(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            var parameters = new ModalParameters();
            parameters.Add("<#=PrimaryKeyName#>", <#=PrimaryKeyName#>);
            var formModal = Modal?.Show<<#=ModelName#>AddEdit>("Edit <#=ModelNameWithSpaces#>", parameters);
            if (formModal != null)
            {
                var result = await formModal.Result;
                if (!result.Cancelled)
                {
                    await LoadData();
                    if (searchTerm!=null)
                    {
                        ApplyFilter();
                    }
                }
            }
            <#=ModelName#>Id = <#=PrimaryKeyName#>;
        }
<#           }#>            
<#           if (!UseBlazored) {#>        
        private void HideMessage()
        {
            if (ApplicationState != null )
            {
                ApplicationState.Message = null; 
            }
        }
        private void Edit<#=ModelName#>(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            <#=ModelName#>Id=<#=PrimaryKeyName#>;
            EditTitle = "Edit <#=ModelNameWithSpaces#>";
            ShowEdit = true;
        }
        private void ToggleModal()
        {
            ShowEdit = !ShowEdit;
        }
        private void ToggleShowDeleteConfirm()
        {
            ShowDeleteConfirm = !ShowDeleteConfirm;
        }
        public async Task CloseModalAsync(bool close)
        {
            if (close)
            {
                ShowEdit = false;
                await LoadData();
            }
        }
        private async void CloseConfirmDeletion(bool confirmation)
        {
            ShowDeleteConfirm = false;
            if (<#=ModelName#>DataService == null) return;
            if (confirmation)
            {
                await <#=ModelName#>DataService.Delete<#=ModelName#>(<#=ModelName#>Id);
                if (ApplicationState != null)
                {
                    ApplicationState.Message = $"{<#=ModelName#>Id} <#=ModelNameWithSpaces#> item has been deleted successfully";
                    ApplicationState.MessageType = "success";
                }
                await LoadData();
                StateHasChanged();
            }
        }
 
<#           }#>
        private async Task OnValueChangedPageSize(int value)
        {
            pageSize = value;
            pageNumber = 1;
            await LoadData();
        }
        private async Task PageDown(bool goBeginning)
        {
            if (goBeginning || pageNumber <= 0)
            {
                pageNumber = 1;
            }
            else
            {
                pageNumber--;
            }
            await LoadData();
        }
        private async Task PageUp(bool goEnd)
        {
            int maximumPages = (int)Math.Ceiling((decimal)totalRows / pageSize);
            if (goEnd || pageNumber >= maximumPages)
            {
                pageNumber = maximumPages;
            }
            else
            {
                pageNumber++;
            }
            await LoadData();
        }

    }
}