<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Ardalis.GuardClauses;
using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using <#=DTONamespaceName#>.Repositories;
using <#=DTONamespaceName#>.DTOs;


namespace <#=Namespace#>.Services
{
    public class <#=ModelName#>DataService : I<#=ModelName#>DataService
    {
        private readonly I<#=ModelName#>Repository _<#=ModelNameCamelCase#>Repository;

        public <#=ModelName#>DataService(I<#=ModelName#>Repository <#=ModelNameCamelCase#>Repository)
        {
            this._<#=ModelNameCamelCase#>Repository = <#=ModelNameCamelCase#>Repository;
        }
<#
        if (!string.IsNullOrEmpty(ForeignKeyName)){
#>
        public async Task<List<<#=ModelName#>DTO>> GetAll<#=PluralTablename#>Async
        (<#=ForeignKeyDataType#> <#=ForeignKeyName#>,int pageNumber, int pageSize, string? serverSearchTerm)
        {
            var <#=PluralTablename#> = await _<#=ModelNameCamelCase#>Repository.GetAll<#=PluralTablename#>Async
            (<#=ForeignKeyName#>, pageNumber, pageSize, serverSearchTerm);            
            return <#=PluralTablename#>.ToList();
        }
<#      } else {
#>
        public async Task<List<<#=ModelName#>DTO>> GetAll<#=PluralTablename#>Async(int pageNumber, int pageSize, string? serverSearchTerm)
        {
            var <#=PluralTablename#> = await _<#=ModelNameCamelCase#>Repository.GetAll<#=PluralTablename#>Async( pageNumber, pageSize, serverSearchTerm);
            return <#=PluralTablename#>.ToList();
        }
<#      }
#>
        public async Task<List<<#=ModelName#>DTO>> Search<#=PluralTablename#>Async(string serverSearchTerm)
        {
            var <#=PluralTablename#> = await _<#=ModelNameCamelCase#>Repository.Search<#=PluralTablename#>Async(serverSearchTerm);
            return <#=PluralTablename#>.ToList();
        }

        public async Task<<#=ModelName#>DTO?> Get<#=ModelName#>ById(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            var <#=ModelNameCamelCase#> = await _<#=ModelNameCamelCase#>Repository.Get<#=ModelName#>ByIdAsync(<#=PrimaryKeyName#>);
            return <#=ModelNameCamelCase#>;
        }
        public async Task<CrudRecordResult> Add<#=ModelName#>(<#=ModelName#>DTO <#=ModelNameCamelCase#>DTO)
        {
            Guard.Against.Null(<#=ModelNameCamelCase#>DTO);
            var result = await _<#=ModelNameCamelCase#>Repository.Add<#=ModelName#>Async(<#=ModelNameCamelCase#>DTO);
            return result;
        }
        public async Task<CrudRecordResult> Update<#=ModelName#>(<#=ModelName#>DTO <#=ModelNameCamelCase#>DTO, string? username)
        {
            Guard.Against.Null(<#=ModelNameCamelCase#>DTO);
            Guard.Against.Null(username);
            var result = await _<#=ModelNameCamelCase#>Repository.Update<#=ModelName#>Async(<#=ModelNameCamelCase#>DTO);
            return result;
        }

        public async Task<CrudRecordResult> Delete<#=ModelName#>(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            await _<#=ModelNameCamelCase#>Repository.Delete<#=ModelName#>Async(<#=PrimaryKeyName#>);
        }
        public async Task<int> GetTotalCount()
        {
            int result = await _<#=ModelNameCamelCase#>Repository.GetTotalCountAsync();
            return result;
        }
    }
}