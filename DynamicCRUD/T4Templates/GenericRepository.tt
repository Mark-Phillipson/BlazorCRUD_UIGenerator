<#@ template debug="true" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using AutoMapper;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Ardalis.GuardClauses;
using <#=Namespace#>.Models;
using <#=Namespace#>.DTOs;
using <#=Namespace#>.Data;


namespace <#=Namespace#>.Repositories
{
    public class <#=ModelName#>Repository : I<#=ModelName#>Repository
    {
        private readonly IDbContextFactory<<#=DbContextName#>> _contextFactory;
        private readonly IMapper _mapper;

        public <#=ModelName#>Repository(IDbContextFactory<<#=DbContextName#>> contextFactory,IMapper mapper)
        {
            _contextFactory = contextFactory;
            this._mapper = mapper;
        }
		<#
		if (!string.IsNullOrEmpty(ForeignKeyName)) {
#>
        public async Task<IEnumerable<<#=ModelName#>DTO>> GetAll<#=PluralTablename#>Async(<#=ForeignKeyDataType#> <#=ForeignKeyName#>, int pageNumber, int pageSize, string? serverSearchTerm)
        {
            using var context = _contextFactory.CreateDbContext();
            List<<#=ModelName#>> <#=PluralTablename#>;
            if (!string.IsNullOrWhiteSpace(serverSearchTerm))
            {
                <#=PluralTablename#>= await context.<#=PluralTablename#>
                .Where(v => v.<#=ForeignKeyName#>==<#=ForeignKeyName#>)
                    .Where(v => 
<# 
            var counter=0;
            foreach (var property in DatabaseColumns.Where(v => v.Filter==true))  {
                counter++;
#>
<#
                if (counter==1) {
#>
                    (v.<#=property.PropertyName#>!= null  && v.<#=property.PropertyName#>.ToLower().Contains(serverSearchTerm))
<#              } else {
#>
                     || (v.<#=property.PropertyName#>!= null  &&  v.<#=property.PropertyName#>.ToLower().Contains(serverSearchTerm))
<#              }
            }
#>                    )
                
                //.OrderBy(v => v.?)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            }
            else {
             <#=PluralTablename#>= await context.<#=PluralTablename#>
                .Where(v => v.<#=ForeignKeyName#>==<#=ForeignKeyName#>)
                //.OrderBy(v => v.?)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
            }
            IEnumerable<<#=ModelName#>DTO> <#=PluralTablename#>DTO = _mapper.Map<List<<#=ModelName#>>, IEnumerable<<#=ModelName#>DTO>>(<#=PluralTablename#>);
            return <#=PluralTablename#>DTO;
        }
<#      } else { #>
        public async Task<IEnumerable<<#=ModelName#>DTO>> GetAll<#=PluralTablename#>Async(int pageNumber, int pageSize, string? serverSearchTerm)
        {
            using var context = _contextFactory.CreateDbContext();
            List<<#=ModelName#>> <#=PluralTablename#>;
            if (!string.IsNullOrWhiteSpace(serverSearchTerm))
            {
                <#=PluralTablename#> = await context.<#=PluralTablename#>
                                        .Where(v => 
<# 
            var counter=0;
            foreach (var property in DatabaseColumns.Where(v => v.Filter==true))  {
                counter++;
#>
<#
                if (counter==1) {
#>
                    (v.<#=property.PropertyName#>!= null  && v.<#=property.PropertyName#>.ToLower().Contains(serverSearchTerm))
<#              } else {
#>
                     || (v.<#=property.PropertyName#>!= null  &&  v.<#=property.PropertyName#>.ToLower().Contains(serverSearchTerm))
<#              }
            }
#>                    )

                    //.OrderBy(v => v.?)
                    .Skip((pageNumber - 1) * pageSize)
                    .Take(pageSize)
                    .ToListAsync();
            }
            else
            {
                <#=PluralTablename#> = await context.<#=PluralTablename#>
                    //.OrderBy(v => v.?)
                    .Skip((pageNumber - 1) * pageSize)
                    .Take(pageSize)
                    .ToListAsync();
            }
            IEnumerable<<#=ModelName#>DTO> <#=PluralTablename#>DTO = _mapper.Map<List<<#=ModelName#>>, IEnumerable<<#=ModelName#>DTO>>(<#=PluralTablename#>);
            return <#=PluralTablename#>DTO;
        }
<#      } #>
        public async Task<IEnumerable<<#=ModelName#>DTO>> Search<#=PluralTablename#>Async(string serverSearchTerm)
        {
            using var context = _contextFactory.CreateDbContext();
            var <#=PluralTablename#>= await context.<#=PluralTablename#>
                //.Where(v => v.Property!= null  && v.Property.ToLower().Contains(serverSearchTerm.ToLower())
                //||v.Property!= null  && v.Property.ToLower().Contains(serverSearchTerm.ToLower())
                //)
                //.OrderBy(v => v.?)
                .Take(1000)
                .ToListAsync();
            IEnumerable<<#=ModelName#>DTO> <#=PluralTablename#>DTO = _mapper.Map<List<<#=ModelName#>>, IEnumerable<<#=ModelName#>DTO>>(<#=PluralTablename#>);
            return <#=PluralTablename#>DTO;
        }

        public async Task<<#=ModelName#>DTO?> Get<#=ModelName#>ByIdAsync(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            using var context = _contextFactory.CreateDbContext();
            var result =await context.<#=PluralTablename#>.AsNoTracking()
              .FirstOrDefaultAsync(c => c.<#=PrimaryKeyName#> == <#=PrimaryKeyName#>);
            if (result == null) return null;
            <#=ModelName#>DTO <#=ModelNameCamelCase#>DTO=_mapper.Map<<#=ModelName#>,<#=ModelName#>DTO>(result);
            return <#=ModelNameCamelCase#>DTO;
        }

        public async Task<CrudRecordResult> Add<#=ModelName#>Async(<#=ModelName#>DTO <#=ModelNameCamelCase#>DTO)
        {
            CrudRecordResult crudRecordResult = new CrudRecordResult();
            using var context = _contextFactory.CreateDbContext();
            <#=ModelName#> <#=ModelNameCamelCase#> = _mapper.Map<<#=ModelName#>DTO, <#=ModelName#>>(<#=ModelNameCamelCase#>DTO);
            var addedEntity = context.<#=PluralTablename#>.Add(<#=ModelNameCamelCase#>);
            try
            {
                await context.SaveChangesAsync();
            }
            catch (Exception exception)
            {
                var message = exception.Message;
                var innerException = exception.InnerException;

                while (innerException != null)
                {
                    message += " --> " + innerException.Message;
                    innerException = innerException.InnerException;
                }
                Console.WriteLine(message);
                crudRecordResult.<#=PrimaryKeyName#> = <#ModelName#>.<#=PrimaryKeyName#>;
                crudRecordResult.IsSuccess = false;
                crudRecordResult.Message = message;
                return crudRecordResult;

            }            
            crudRecordResult.Message= "Record Added Successfully!";
            crudRecordResult.<#=PrimaryKeyName#> = <#ModelName#>.<#=PrimaryKeyName#>;
            crudRecordResult.IsSuccess = true;
            return crudRecordResult;
        }

        public async Task<CrudRecordResult> Update<#=ModelName#>Async(<#=ModelName#>DTO <#=ModelNameCamelCase#>DTO)
        {
            CrudRecordResult crudRecordResult = new CrudRecordResult();
            <#=ModelName#> <#=ModelNameCamelCase#>=_mapper.Map<<#=ModelName#>DTO, <#=ModelName#>>(<#=ModelNameCamelCase#>DTO);
            using (var context = _contextFactory.CreateDbContext())
            {
                var found<#=ModelName#> = await context.<#=PluralTablename#>.AsNoTracking().FirstOrDefaultAsync(e => e.<#=PrimaryKeyName#> == <#=ModelNameCamelCase#>.<#=PrimaryKeyName#>);

                if (found<#=ModelName#> != null)
                {
                    var mapped<#=ModelName#> = _mapper.Map<<#=ModelName#>>(<#=ModelNameCamelCase#>);
                    context.<#=PluralTablename#>.Update(mapped<#=ModelName#>);
                    try
                    {
                        await context.SaveChangesAsync();
                    }
                    catch (Exception exception)
                    {
                        var message = exception.Message;
                        var innerException = exception.InnerException;

                        while (innerException != null)
                        {
                            message += " --> " + innerException.Message;
                            innerException = innerException.InnerException;
                        }
                        Console.WriteLine(message);
                        crudRecordResult.<#=PrimaryKeyName#> = <#ModelName#>.<#=PrimaryKeyName#>;
                        crudRecordResult.IsSuccess = false;
                        crudRecordResult.Message = message;
                        return crudRecordResult;        
                    }
                    crudRecordResult.<#=PrimaryKeyName#> = <#ModelName#>.<#=PrimaryKeyName#>;
                    crudRecordResult.IsSuccess = true;
                    crudRecordResult.Message = "Record Updated Successfully!";
                    return crudRecordResult;
                }
            }
            crudRecordResult.Message= "Record Not Found!";
            crudRecordResult.<#=PrimaryKeyName#> = <#ModelName#>.<#=PrimaryKeyName#>;
            crudRecordResult.IsSuccess = false;
            return crudRecordResult;

        }
        public async Task<CrudRecordResult> Delete<#=ModelName#>Async(<#=PrimaryKeyDataType#> <#=PrimaryKeyName#>)
        {
            using var context = _contextFactory.CreateDbContext();
            var found<#=ModelName#> = context.<#=PluralTablename#>.FirstOrDefault(e => e.<#=PrimaryKeyName#> == <#=PrimaryKeyName#>);
            if (found<#=ModelName#> == null)
            {
                return;
            }
            context.<#=PluralTablename#>.Remove(found<#=ModelName#>);
                        try
            {
                await context.SaveChangesAsync();
            }
            catch (System.Exception exception)
            {
                System.Console.WriteLine(exception.Message);
                return new CrudRecordResult { Id = Id, IsSuccess = false, Message = exception.Message };
            }
            return new CrudRecordResult { Id = Id, IsSuccess = true, Message = "Record Deleted Successfully!" };
        }
        public async Task<int> GetTotalCountAsync()
        {
            using var context = _contextFactory.CreateDbContext();
            return await context.<#=PluralTablename#>.CountAsync();
        }

    }
}