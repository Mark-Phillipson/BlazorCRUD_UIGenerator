<#@ template debug="true" hostspecific="false" language="C#" #>

<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.CodeDom.Compiler" #>
<#@ assembly name="System.CodeDom" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".razor" #>
<# if (!string.IsNullOrWhiteSpace(ForeignKeyName)) {#>
@page "/<#=PluralTablename.ToLower()#>/{<#=ForeignKeyName#>:int}"
<# } else { #>
@page "/<#=PluralTablename.ToLower()#>"
<# }#>
<PageTitle><#=ModelNameWithSpaces#> Table</PageTitle>
@* @rendermode InteractiveServer // Required if interactive mode is not Global *@
<header>
<div class="row">
<div class="col-md-12">
    <# if (!UseBlazored) {#>
    @if (ApplicationState!= null &&
    !string.IsNullOrWhiteSpace(ApplicationState.Message))
    {
<# if (!UseRadzen) {#>
    <div class="alert alert-@ApplicationState.MessageType alert-dismissible fade show"
        role="alert">
        <strong>Note!</strong>
        @ApplicationState.Message
        @DateTime.Now.ToShortTimeString()
        <button type="button" class="btn btn-sm btn-outline-secondary"
            @onclick="@(() => HideMessage())"
            aria-label="Close">x</button>
    </div>
    <# } else {#>
            <RadzenAlert Title="Note!" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                @ApplicationState.Message
                @DateTime.Now.ToShortTimeString()
            </RadzenAlert>
    <# }#>
    }
    <# }#>
</div>
<div class="col-md-3">
<h1 class="m-1 fs-4">@Title of @totalRows Page: @pageNumber</h1>
</div>
@if (_serverPaging) {
<div class="col-md-4">
    <# if (!UseRadzen) {#>
    <button title="Go to 1st page" type="button"
        class="btn btn-sm btn-outline-secondary mx-1"
        @onclick="@(()  => PageUp(true))">
        <i class="bi bi-skip-backward-fill"></i>
    </button>
    <button title="Go to previous page" type="button"
        class="btn btn-sm btn-outline-secondary mx-1"
        @onclick="(()  => PageUp(false))">
        <i class="bi bi-caret-left-fill"></i>
    </button>
    <button title="Go to next page" type="button"
        class="btn btn-sm btn-outline-secondary mx-1"
        @onclick="(() => PageDown(false)) ">
        <i class="bi bi-caret-right-fill"></i>
    </button>
    <button title="Go to last page" type="button"
        class="btn btn-sm btn-outline-secondary mx-1"
        @onclick="(()  => PageDown(true))">
        <i class="bi bi-skip-forward-fill"></i>
    </button>
    <# } else {#>
            <RadzenButton Text="First" title="Go to 1st page" ButtonStyle="ButtonStyle.Base" Icon="skip_previous"
                Click="@(() => PageUp(true))" Size="ButtonSize.Small" />
            
            <RadzenButton title="Go to previous page" Text="Previous" ButtonStyle="ButtonStyle.Base" Icon="arrow_back"
                Click="@(() => PageUp( false ))" Size="ButtonSize.Small" />

            <RadzenButton title="Go to next page" Text="Next" ButtonStyle="ButtonStyle.Base" Icon="arrow_forward"
                Click="@(() => PageDown(false))" Size="ButtonSize.Small" />

            <RadzenButton title="Go to last page" Text="Last" ButtonStyle="ButtonStyle.Base" Icon="skip_next"
                Click="@(() => PageDown(true))" Size="ButtonSize.Small" />
    <# }#>
</div>
}
<#if (!string.IsNullOrWhiteSpace(ForeignKeyName)) {#>
    @* <div class="col-md-1">
        <a class="btn btn-primary btn-sm m-2"
            href="/ParentTable/@<#=ForeignKeyName#>"><i
                class="" bi bi-caret-left"></i></a
            </div>*@
        <#} #>
            @if (_serverPaging) {
            <div class="col-md-4">
                <# if (!UseRadzen) {#>
                <label for='SearchInput' class="sr-only">Type to Filter</label>
                <input @ref="SearchInput" accesskey="i"
                    class="form-control my-1"
                    style="float:right"
                    @bind="@SearchTerm"
                    @bind:event="oninput"
                    @onblur="ApplyFilter"
                    id="SearchInput" name="SearchTerm"
                    placeholder="Filter by <#=FilterColumns#> (Alt+I)" />
                <# } else {#>
                    <div class="row">
                        <div class="col-md-2">
                            <RadzenLabel class="rz-p-1" for="SearchInput" accesskey="i">Filter</RadzenLabel>
                        </div>
                        <div class="col-md-10">
                            <RadzenTextBox @ref="SearchInput" TextStyle="TextStyle.Subtitle2" @bind-Value=@SearchTerm
                                Change="@( () => ApplyFilter() )" id="SearchInput" name="SearchTerm"
                                Placeholder="Filter on Leave (Alt+I)">
                            </RadzenTextBox>
                        </div>
                    </div>
                <# }#>
            </div>
            } else {
                <# if (!UseRadzen) {#>
                <div class="col-md-3">
                    <label for='ClientSearchInput' class="sr-only">Type to Filter</label>
                    <input @ref="SearchInput" class="form-control my-1" style="float:right" @bind="@ClientSearchTerm" id="ClientSearchInput"
                        name="ClientSearchTerm" @bind:event="oninput" placeholder="Filter by <#=FilterColumns#>" />
                </div>
                <# } else {#>
                    <div class="col-md-3">
                        <label for='ClientSearchInput' class="sr-only">Type to Filter</label>
                        <RadzenTextBox id="ClientSearchInput" class='rz-my-1' @bind-Value="@ClientSearchTerm"
                        @oninput=@(args => OnChangeClientSearchTerm(args?.Value?.ToString()))
                            Placeholder="Filter by <#=FilterColumns#>" />
                    </div>
                <# }#>
            }
    </div>
</header>
<main>
    @if (Filtered<#=ModelName#>DTO == null && _loadFailed == true)
        {
        <h2 class="text-danger">The data failed to load
            please try again in a little while..</h2>
        <# if (!UseRadzen) {#>
            <button class="btn btn-danger" type="button"
            @onclick="@( () => LoadData() )">Reload</button>
        <# } else {#>
            <RadzenButton Text="Reload" ButtonStyle="ButtonStyle.Danger" Click="@(() => LoadData())" />
        <# }#>
        <h6 class="text-danger">@ExceptionMessage</h6>
    }
    else if (Filtered<#=ModelName#>DTO == null)
            {
            <# if (!UseRadzen) {#>
            <div style="display:normal;margin:auto"
                class="loader"></div>
            <# } else {#>
                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Danger" Value="100" ShowValue="false"
                    Mode="ProgressBarMode.Indeterminate" />
            <# }#>
            }
    else if (Filtered<#=ModelName#>DTO.Count ==
        0)
        {
        <p>No <#=ModelNameWithSpaces#> match the
                criteria</p>
        <# if (!UseRadzen) {#>
        <button type="button" @onclick="AddNew<#=ModelName#>"
            class="btn btn-outline-primary btn-lg">
            Add Record 
            <i class="bi bi-plus-square"></i>
        </button>
        <# } else {#>
            <RadzenButton Shade="Shade.Dark" Text="Add Record" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Large"
        Click="@(() => AddNew<#=ModelName#>())" Icon="add_circle"/>
        <# }#>
        }
    else
    {
    <# if (!UseRadzen) {#>
    <table style="font-size:x-large" class="table table-bordered table-striped table-sm table-responsive-sm">
        <thead>
            <tr>
                <# foreach (var property in DatabaseColumns) { #>
                    <# if (property.Sort) {
                        #>
                        <th>
                            <# if (!UseRadzen) {#>
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                @onclick="@(() => Sort<#=ModelName#>("<#=property.PropertyName#>"))">
                                <i class="bi bi-sort-alpha-up"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                @onclick="@(() => Sort<#=ModelName#>("<#=property.PropertyName#> Desc"))">
                                <i class="bi bi-sort-alpha-up-alt"></i>
                            </button>
                            <# } else {#>
                                <RadzenButton ButtonStyle="ButtonStyle.Base" Icon="sort_by_alpha"
                                    Click="@(() => Sort<#=ModelName#>("<#=property.PropertyName#>"))" />
                                <RadzenButton ButtonStyle="ButtonStyle.Base" Icon="swap_vert"
                                    Click="@(() => Sort<#=ModelName#>("<#=property.PropertyName#> Desc"))" />
                            <# }#>
                            <#=property.Label#>
                        </th>
                        <# } else { #>
                            <th>
                                <#=property.Label#>
                            </th>
                            <# } } #>
                            <th>
                            <# if (!UseRadzen) {#>
                              <button type="button" accesskey="+"
                                    @onclick="AddNew<#=ModelName#>" class="btn btn-outline-success btn-sm w-100">
                                    Create
                                    <i class="bi bi-plus-square"></i>
                              </button>
                            <# } else { #>
                                <RadzenButton Style="color:white" Shade="Shade.Dark" Text="Add Record" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Small" Icon="add_circle"
                            Click="@(() => AddNew<#=ModelName#>())"/>
                            <# }#>
                            </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var <#=ModelNameCamelCase#> in Filtered<#=ModelName#>DTO)
                            {
                            <tr>
                                <# foreach (var property in DatabaseColumns)
                                    { #>
                                    <# if
                                        (property.PropertyName==PrimaryKeyName)
                                        { #>
<td style="cursor:pointer" @onclick="@(() => Edit<#=ModelName#>(<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>))">
    <# if (!UseRadzen) {#>
    <button type="button" class="btn btn-sm btn-link">
        @<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>
    </button>
    <# } else { #>
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Text="@<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>.ToString()"
                            Click="@(() => Edit<#=ModelName#>(<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>))" />
    <# }#>
</td>
<# } else {#>
    <td>
        @<#=ModelNameCamelCase#>.<#=property.PropertyName#>
    </td>
    <# } }#>
        <# if (!UseRadzen) {#>
        <td class="btn-group-vertical border border-1" style='width:100%'>
            <button type="button" class="btn btn-sm btn-outline-warning"
                @onclick="@(() => Edit<#=ModelName#>(<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>))">
                Edit
                <i class="bi bi-pencil-square"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-danger"
                @onclick="@(() => Delete<#=ModelName#>(<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>))">
                Delete
                <i class="bi bi-trash"></i>
            </button>
        </td>
        <# } else { #>
                        <td>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                        <RadzenButton Style="color:black" Shade="Shade.Dark" Text="Edit" ButtonStyle="ButtonStyle.Warning" Icon="edit"
                            Click="@(() => Edit<#=ModelName#>(<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>))" Size="ButtonSize.Small"/>

                        <RadzenButton Shade="Shade.Dark" Text="Delete" ButtonStyle="ButtonStyle.Danger" Icon="delete"
                            Click="@(() => Delete<#=ModelName#>(<#=ModelNameCamelCase#>.<#=PrimaryKeyName#>))" Size="ButtonSize.Small"/>
                        </RadzenStack>
                        </td>
            <# }#>
            </tr>
            }
        </tbody>
    </table>
    <# }#>
}
</main>
<# if (!UseBlazored) {#>
@if (ShowEdit)
{
<# if (!UseRadzen) {#>
    <dialog open="true" style="position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw" class="border border-danger">
    <button class="btn btn-outline-secondary m-2" style="float:right" type="button"
        @onclick="@( ( ) => ToggleModal(  ) )">x
    </button>
    <div>
        <<#=ModelName#>AddEdit Title="@EditTitle" <#=PrimaryKeyName#>="@<#=ModelName#>Id" CloseModal="@CloseModalAsync" />
    </div>
</dialog>
<# } else { #>
    <dialog open="true" style="position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw;max-height:600px"
        class="border border-danger rz-layout">
        <div style="min-width:80vw">
        <RadzenStack Orientation="Orientation.Vertical">
                <div class='row'>
                    <div class='col-md-11'>
                        <h1>@EditTitle</h1>
                    </div>
                    <div class='col-md-1'>
                        <RadzenButton Text="x" ButtonStyle="ButtonStyle.Secondary" Click="@ToggleModal" />
                    </div>
                </div>
            <<#=ModelName#>AddEdit Title="@EditTitle" <#=PrimaryKeyName#>="@<#=ModelName#>Id" CloseModal="@CloseModalAsync" />
        </RadzenStack>
        </div>
    </dialog>    
<# }#>
}
@if (ShowDeleteConfirm)
{
<# if (!UseRadzen) {#>
<dialog open="true" style="position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw" class="border border-danger">
    <button class="btn btn-outline-secondary m-2" style="float:right" type="button"
        @onclick="@( ( ) => ToggleShowDeleteConfirm(  ) )">x
    </button>
    <BlazoredModalConfirmDialogMVC
        Confirm="@CloseConfirmDeletion"
        ButtonColour="danger"
        Icon="bi bi-trash"
        Message="Please confirm that you wish to delete a record."
        Title="Deletion Confirmation <#=ModelNameWithSpaces#> Table" />
    <form method="dialog">
    </form>
</dialog>
<# } else { #>
<dialog open="true" style="position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw;max-height:300px"
        class="border border-danger rz-layout">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenStack Orientation="Orientation.Horizontal">
                <div class='row'>
                    <div class='col-md-10'>
                        <h3>Deletion Confirmation <#=ModelNameWithSpaces#> Table</h3>
                    </div>
                    <div class='col-md-2'>
                        <RadzenButton Text="x" ButtonStyle="ButtonStyle.Secondary"
                            Click="@ToggleShowDeleteConfirm" />
                    </div>
                </div>
            </RadzenStack>
            <BlazoredModalConfirmDialogMVC Confirm="CloseConfirmDeletion" ButtonColour="danger" Icon="bi bi-trash"
                Message="@message" Title="Deletion Confirmation <#=ModelNameWithSpaces#> Table" />
        </RadzenStack>
</dialog>
<# }#>
}
<# }#>