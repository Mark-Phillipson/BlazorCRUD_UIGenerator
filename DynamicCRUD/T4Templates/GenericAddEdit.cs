// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicCRUD.T4Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class GenericAddEdit : GenericAddEditBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 10 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
  int cols= 12;
    if (DatabaseColumns.Count()>7) {cols= 6;} 
    if (DatabaseColumns.Count()>14) {cols= 4;}
    if (DatabaseColumns.Count()>21) {cols= 3;}

            
            #line default
            #line hidden
            this.Write("@page \"/");
            
            #line 15 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("\"\r\n<div style=\"min-width:80vw\">\r\n    <EditForm Model=\"@");
            
            #line 17 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO\" OnValidSubmit=\"@HandleValidSubmit\">\r\n        <DataAnnotationsValidator />\r\n " +
                    "       @*<ValidationSummary />*@\r\n");
            
            #line 20 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
      if (PrimaryKeyDataType=="int") {

            
            #line default
            #line hidden
            this.Write("        @if (");
            
            #line 22 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 22 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" > 0)\r\n");
            
            #line 23 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
      } else {

            
            #line default
            #line hidden
            this.Write("        @if (");
            
            #line 25 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 25 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("!= null )\r\n");
            
            #line 26 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
      }

            
            #line default
            #line hidden
            this.Write("        {\r\n            <span class=\"text-info\">@");
            
            #line 29 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 29 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("</span>\r\n        }\r\n        <div class=\"row\">\r\n            <div class=\"col-");
            
            #line 32 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cols));
            
            #line default
            #line hidden
            this.Write("\">\r\n");
            
            #line 33 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
 
            var counter=0;
            foreach (var property in DatabaseColumns.Where(w => w.IsAutoIncrement==false))  {
                counter++;
                if (counter==8 || counter== 15 || counter== 22 ) {

            
            #line default
            #line hidden
            this.Write("             </div>\r\n               <div class=\"col-");
            
            #line 39 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cols));
            
            #line default
            #line hidden
            this.Write("\">\r\n");
            
            #line 40 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"

                }
                if (property.DataType=="nvarchar" && property.ColumnSize< 51) {

            
            #line default
            #line hidden
            this.Write("                <div class=\"form-group\">\r\n                    <label for=\"");
            
            #line 45 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 45 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write(":</label>");
            
            #line 45 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"

                    if (property.Required) {

            
            #line default
            #line hidden
            this.Write(" <i class=\"text-danger fa\">*</i>\r\n");
            
            #line 48 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
                  }

            
            #line default
            #line hidden
            this.Write("\r\n                    <InputText id=\"");
            
            #line 51 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-control\" @bind-Value=\"@");
            
            #line 51 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 51 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                               placeholder=\"Enter ");
            
            #line 52 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write("\"></InputText>\r\n                    <ValidationMessage For=\"@(() => ");
            
            #line 53 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 53 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(")\" />\r\n                </div>\r\n");
            
            #line 55 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
              } else if (property.DataType=="int") {

            
            #line default
            #line hidden
            this.Write("                <div class=\"form-group\">\r\n                    <label for=\"");
            
            #line 58 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 58 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write(": </label>");
            
            #line 58 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"

                    if (property.Required) {

            
            #line default
            #line hidden
            this.Write(" <i class=\"text-danger fa\">*</i>\r\n");
            
            #line 61 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
                  }

            
            #line default
            #line hidden
            this.Write("                    <InputNumber id=\"");
            
            #line 63 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-control\" @bind-Value=\"@");
            
            #line 63 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 63 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                                 placeholder=\"Enter ");
            
            #line 64 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write("\"></InputNumber>\r\n                    <ValidationMessage For=\"@(() => ");
            
            #line 65 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 65 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(")\" />\r\n                </div>\r\n");
            
            #line 67 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
              } else if (property.DataType=="bit") {

            
            #line default
            #line hidden
            this.Write("                <div class=\"form-group\">\r\n                    <label for=\"");
            
            #line 70 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 70 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write(": </label>\r\n                    <InputCheckbox id=\"");
            
            #line 71 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-checkbox\" @bind-Value=\"@");
            
            #line 71 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 71 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\">\r\n                    </InputCheckbox>\r\n                    <ValidationMessage " +
                    "For=\"@(() => ");
            
            #line 73 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 73 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(")\" />\r\n                </div>\r\n");
            
            #line 75 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
              } else if (property.DataType=="nvarchar"  && property.ColumnSize> 50) {

            
            #line default
            #line hidden
            this.Write("                <div class=\"form-group\">\r\n                    <label for=\"");
            
            #line 78 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 78 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write(": </label>");
            
            #line 78 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"

                    if (property.Required) {

            
            #line default
            #line hidden
            this.Write(" <i class=\"text-danger fa\">*</i>\r\n");
            
            #line 81 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
                  }

            
            #line default
            #line hidden
            this.Write("                    <InputTextArea rows=\"2\" id=\"");
            
            #line 83 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-control\" @bind-Value=\"@");
            
            #line 83 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 83 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                               placeholder=\"Enter ");
            
            #line 84 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write("\"></InputTextArea>\r\n                    <ValidationMessage For=\"@(() => ");
            
            #line 85 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 85 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(")\" />\r\n                </div>\r\n");
            
            #line 87 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
               }
            }

            
            #line default
            #line hidden
            this.Write("            </div>\r\n            <div class=\"col-");
            
            #line 91 "C:\Users\MPhil\source\repos\BostonAcademic.Solution\DynamicCRUD\T4Templates\GenericAddEdit.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cols));
            
            #line default
            #line hidden
            this.Write(@""">
                 @* Move here for the next display column if required *@
            </div>
        </div>
        <hr>
        <div class=""btn-group"" style=""float:right"">
            <a accesskey=""c"" class=""btn btn-outline-primary"" @onclick=""@Close""><u>C</u>ancel</a>
            <button disabled=""@TaskRunning"" accesskey=""s"" type=""submit"" class=""btn btn-primary""><u>S</u>ave Record</button>
        </div>
    </EditForm>
</div>

");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class GenericAddEditBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
