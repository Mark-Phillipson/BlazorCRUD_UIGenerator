// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicCRUD.T4Templates
{
    using System.Linq;
    using System.Text;
    using System.Reflection;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class GenericAddEditCodeBehind : GenericAddEditCodeBehindBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using System.Net.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Components.Routing;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.Web.Virtualization;
using Microsoft.JSInterop;
");
            
            #line 22 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (UseBlazored) {
            
            #line default
            #line hidden
            this.Write("using Blazored.Modal;\r\nusing Blazored.Modal.Services;\r\nusing Blazored.Toast;\r\nusi" +
                    "ng Blazored.Toast.Services;\r\n");
            
            #line 27 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("using System.Security.Claims;\r\nusing ");
            
            #line 29 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".DTOs;\r\nusing ");
            
            #line 30 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".Services;\r\n\r\nnamespace ");
            
            #line 32 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".Pages\r\n{\r\n    public partial class ");
            
            #line 34 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("AddEdit : ComponentBase\r\n    {\r\n");
            
            #line 36 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (!UseBlazored) {
            
            #line default
            #line hidden
            this.Write("        [Parameter] public EventCallback<bool> CloseModal { get; set; } \r\n");
            
            #line 38 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           } else {
            
            #line default
            #line hidden
            this.Write("        [Inject] IToastService? ToastService { get; set; }\r\n        [CascadingPar" +
                    "ameter] BlazoredModalInstance? ModalInstance { get; set; }\r\n");
            
            #line 41 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("        [Parameter] public string? Title { get; set; }\r\n        [Inject] public I" +
                    "Logger<");
            
            #line 43 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("AddEdit>? Logger { get; set; }\r\n        [Inject] public IJSRuntime? JSRuntime { g" +
                    "et; set; }\r\n        [Parameter] public ");
            
            #line 45 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyDataType));
            
            #line default
            #line hidden
            this.Write("? ");
            
            #line 45 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 46 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"

	if (!string.IsNullOrEmpty(ForeignKeyName)) {

            
            #line default
            #line hidden
            this.Write("      [Parameter] public ");
            
            #line 48 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForeignKeyDataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 48 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForeignKeyName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 49 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
	} 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 50 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO ");
            
            #line 50 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO { get; set; } = new ");
            
            #line 50 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO();//{ };\r\n        [Inject] public I");
            
            #line 51 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService? ");
            
            #line 51 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService { get; set; }\r\n");
            
            #line 52 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (!UseBlazored) {
            
            #line default
            #line hidden
            this.Write("        [Inject] public ApplicationState? ApplicationState { get; set; }\r\n");
            
            #line 54 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write(@"        [Parameter] public int ParentId { get; set; }
        ElementReference FirstInput;
#pragma warning disable 414, 649
        bool TaskRunning = false;
#pragma warning restore 414, 649
        protected override async Task OnInitializedAsync()
        {
            if (");
            
            #line 62 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService == null)\r\n            {\r\n                return;\r\n            }\r\n");
            
            #line 66 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          if (PrimaryKeyDataType=="int") {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 68 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" != null && ");
            
            #line 68 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" != 0)\r\n            {\r\n                var result = await ");
            
            #line 70 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService.Get");
            
            #line 70 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("ById((int)");
            
            #line 70 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(");\r\n                if (result != null)\r\n                {\r\n                    ");
            
            #line 73 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO = result;\r\n                }\r\n");
            
            #line 75 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          } else if (PrimaryKeyDataType=="bigint") {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 77 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" != null && ");
            
            #line 77 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" != 0)\r\n            {\r\n                var result = await ");
            
            #line 79 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService.Get");
            
            #line 79 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("ById((long)");
            
            #line 79 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(");\r\n                if (result != null)\r\n                {\r\n                    ");
            
            #line 82 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO = result;\r\n                }\r\n");
            
            #line 84 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          } else {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 86 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("!= null )\r\n            {\r\n                var result = await ");
            
            #line 88 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService.Get");
            
            #line 88 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("ById((string)");
            
            #line 88 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(");\r\n                if (result != null)\r\n                {\r\n                    ");
            
            #line 91 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO = result;\r\n                }\r\n");
            
            #line 93 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          }

            
            #line default
            #line hidden
            this.Write("            }\r\n            else\r\n            {\r\n");
            
            #line 98 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          if (!string.IsNullOrEmpty(ForeignKeyName)) {

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n                ");
            
            #line 100 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.");
            
            #line 100 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForeignKeyName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 100 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForeignKeyName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 101 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          } 
            
            #line default
            #line hidden
            this.Write(@"            }
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                try
                {
                    await Task.Delay(100);
                    await FirstInput.FocusAsync();
                }
                catch (Exception exception)
                {
                    Console.WriteLine(exception.Message);
                }
            }
        }
");
            
            #line 120 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (UseBlazored) {
            
            #line default
            #line hidden
            this.Write("        public async Task CloseAsync()\r\n        {\r\n              if (ModalInstanc" +
                    "e != null)\r\n                  await ModalInstance.CancelAsync();\r\n        }\r\n");
            
            #line 126 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            
            #line 127 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (!UseBlazored) {
            
            #line default
            #line hidden
            this.Write("        public async Task CloseAsync()\r\n        {\r\n              await CloseModal" +
                    ".InvokeAsync(true);\r\n        }\r\n");
            
            #line 132 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("        protected async Task HandleValidSubmit()\r\n        {\r\n");
            
            #line 135 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (!UseBlazored) {
            
            #line default
            #line hidden
            this.Write("            if (ApplicationState== null )\r\n            {\r\n                return;" +
                    "\r\n            }\r\n");
            
            #line 140 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("            TaskRunning = true;\r\n");
            
            #line 142 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          if (PrimaryKeyDataType=="int") {

            
            #line default
            #line hidden
            this.Write("            if ((");
            
            #line 144 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" == 0 || ");
            
            #line 144 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" == null) && ");
            
            #line 144 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService != null)\r\n");
            
            #line 145 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          } else {

            
            #line default
            #line hidden
            this.Write("            if ((string.IsNullOrWhiteSpace(");
            
            #line 147 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(") || ");
            
            #line 147 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(" == null) && ");
            
            #line 147 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService != null)\r\n");
            
            #line 148 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          }

            
            #line default
            #line hidden
            this.Write("            {\r\n                ");
            
            #line 151 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO? result = await ");
            
            #line 151 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService.Add");
            
            #line 151 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 151 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO);\r\n                if (result == null && Logger!= null)\r\n                {\r\n " +
                    "                   Logger.LogError(\"");
            
            #line 154 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" failed to add, please investigate Error Adding New ");
            
            #line 154 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 155 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (UseBlazored) {
            
            #line default
            #line hidden
            this.Write("                    ToastService?.ShowError(\"");
            
            #line 156 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" failed to add, please investigate Error Adding New ");
            
            #line 156 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 157 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           } else {
            
            #line default
            #line hidden
            this.Write("                    ApplicationState.Message = \"");
            
            #line 158 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" failed to add, please investigate Error Adding New ");
            
            #line 158 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write("\";\r\n                    ApplicationState.MessageType = \"danger\";\r\n");
            
            #line 160 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("                    return;\r\n                }\r\n");
            
            #line 163 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (UseBlazored) {
            
            #line default
            #line hidden
            this.Write("                ToastService?.ShowSuccess(\"");
            
            #line 164 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" added successfully\");\r\n");
            
            #line 165 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           } else {
            
            #line default
            #line hidden
            this.Write("                ApplicationState.Message = \"");
            
            #line 166 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" Added successfully\";\r\n                ApplicationState.MessageType = \"success\";\r" +
                    "\n");
            
            #line 168 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("            }\r\n            else\r\n            {\r\n                if (");
            
            #line 172 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService != null)\r\n                {\r\n                    await ");
            
            #line 174 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DataService!.Update");
            
            #line 174 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 174 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO, \"\");\r\n");
            
            #line 175 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           if (UseBlazored) {
            
            #line default
            #line hidden
            this.Write("                    ToastService?.ShowSuccess(\"The ");
            
            #line 176 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" updated successfully\");\r\n");
            
            #line 177 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           } else {
            
            #line default
            #line hidden
            this.Write("                    ApplicationState.Message=\"The ");
            
            #line 178 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" updated successfully\";\r\n                    ApplicationState.MessageType = \"succ" +
                    "ess\";\r\n");
            
            #line 180 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
           }
            
            #line default
            #line hidden
            this.Write("                }\r\n            }\r\n");
            
            #line 183 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          if (UseBlazored) {
            
            #line default
            #line hidden
            this.Write("            if (ModalInstance != null)\r\n            {\r\n                await Moda" +
                    "lInstance.CloseAsync(ModalResult.Ok(true));\r\n            }\r\n");
            
            #line 188 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          } else {
            
            #line default
            #line hidden
            this.Write("            await CloseModal.InvokeAsync(true);\r\n");
            
            #line 190 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericAddEditCodeBehind.tt"
          }
            
            #line default
            #line hidden
            this.Write("            TaskRunning = false;\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class GenericAddEditCodeBehindBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
