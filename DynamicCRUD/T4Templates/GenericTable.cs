// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicCRUD.T4Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class GenericTable : GenericTableBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 11 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!string.IsNullOrWhiteSpace(ForeignKeyName)) {
            
            #line default
            #line hidden
            this.Write("@page \"/");
            
            #line 12 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PluralTablename.ToLower()));
            
            #line default
            #line hidden
            this.Write("/{");
            
            #line 12 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForeignKeyName));
            
            #line default
            #line hidden
            this.Write(":int}\"\r\n");
            
            #line 13 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("@page \"/");
            
            #line 14 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PluralTablename.ToLower()));
            
            #line default
            #line hidden
            this.Write("\"\r\n");
            
            #line 15 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("<PageTitle>");
            
            #line 16 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" Table</PageTitle>\r\n@* @rendermode InteractiveServer // Required if interactive m" +
                    "ode is not Global *@\r\n<header>\r\n<div class=\"row\">\r\n<div class=\"col-md-12\">\r\n    " +
                    "");
            
            #line 21 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseBlazored) {
            
            #line default
            #line hidden
            this.Write("    @if (ApplicationState!= null &&\r\n    !string.IsNullOrWhiteSpace(ApplicationSt" +
                    "ate.Message))\r\n    {\r\n");
            
            #line 25 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write(@"    <div class=""alert alert-@ApplicationState.MessageType alert-dismissible fade show""
        role=""alert"">
        <strong>Note!</strong>
        @ApplicationState.Message
        @DateTime.Now.ToShortTimeString()
        <button type=""button"" class=""btn btn-sm btn-outline-secondary""
            @onclick=""@(() => HideMessage())""
            aria-label=""Close"">x</button>
    </div>
    ");
            
            #line 35 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("            <RadzenAlert Title=\"Note!\" AlertStyle=\"AlertStyle.Info\" Variant=\"Vari" +
                    "ant.Flat\" Shade=\"Shade.Lighter\">\r\n                @ApplicationState.Message\r\n   " +
                    "             @DateTime.Now.ToShortTimeString()\r\n            </RadzenAlert>\r\n    " +
                    "");
            
            #line 40 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("    }\r\n    ");
            
            #line 42 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("</div>\r\n<div class=\"col-md-3\">\r\n<h1 class=\"m-1 fs-4\">@Title of @totalRows Page: @" +
                    "pageNumber</h1>\r\n</div>\r\n@if (_serverPaging) {\r\n<div class=\"col-md-4\">\r\n    ");
            
            #line 49 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write(@"    <button title=""Go to 1st page"" type=""button""
        class=""btn btn-sm btn-outline-secondary mx-1""
        @onclick=""@(()  => PageUp(true))"">
        <i class=""bi bi-skip-backward-fill""></i>
    </button>
    <button title=""Go to previous page"" type=""button""
        class=""btn btn-sm btn-outline-secondary mx-1""
        @onclick=""(()  => PageUp(false))"">
        <i class=""bi bi-caret-left-fill""></i>
    </button>
    <button title=""Go to next page"" type=""button""
        class=""btn btn-sm btn-outline-secondary mx-1""
        @onclick=""(() => PageDown(false)) "">
        <i class=""bi bi-caret-right-fill""></i>
    </button>
    <button title=""Go to last page"" type=""button""
        class=""btn btn-sm btn-outline-secondary mx-1""
        @onclick=""(()  => PageDown(true))"">
        <i class=""bi bi-skip-forward-fill""></i>
    </button>
    ");
            
            #line 70 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write(@"            <RadzenButton Text=""First"" title=""Go to 1st page"" ButtonStyle=""ButtonStyle.Base"" Icon=""skip_previous""
                Click=""@(() => PageUp(true))"" Size=""ButtonSize.Small"" />
            
            <RadzenButton title=""Go to previous page"" Text=""Previous"" ButtonStyle=""ButtonStyle.Base"" Icon=""arrow_back""
                Click=""@(() => PageUp( false ))"" Size=""ButtonSize.Small"" />

            <RadzenButton title=""Go to next page"" Text=""Next"" ButtonStyle=""ButtonStyle.Base"" Icon=""arrow_forward""
                Click=""@(() => PageDown(false))"" Size=""ButtonSize.Small"" />

            <RadzenButton title=""Go to last page"" Text=""Last"" ButtonStyle=""ButtonStyle.Base"" Icon=""skip_next""
                Click=""@(() => PageDown(true))"" Size=""ButtonSize.Small"" />
    ");
            
            #line 82 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("</div>\r\n}\r\n");
            
            #line 85 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
if (!string.IsNullOrWhiteSpace(ForeignKeyName)) {
            
            #line default
            #line hidden
            this.Write("    @* <div class=\"col-md-1\">\r\n        <a class=\"btn btn-primary btn-sm m-2\"\r\n   " +
                    "         href=\"/ParentTable/@");
            
            #line 88 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForeignKeyName));
            
            #line default
            #line hidden
            this.Write("\"><i\r\n                class=\"\" bi bi-caret-left\"></i></a\r\n            </div>*@\r\n " +
                    "       ");
            
            #line 91 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
} 
            
            #line default
            #line hidden
            this.Write("            @if (_serverPaging) {\r\n            <div class=\"col-md-4\">\r\n          " +
                    "      ");
            
            #line 94 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write(@"                <label for='SearchInput' class=""sr-only"">Type to Filter</label>
                <input @ref=""SearchInput"" accesskey=""i""
                    class=""form-control my-1""
                    style=""float:right""
                    @bind=""@SearchTerm""
                    @bind:event=""oninput""
                    @onblur=""ApplyFilter""
                    id=""SearchInput"" name=""SearchTerm""
                    placeholder=""Filter by ");
            
            #line 103 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FilterColumns));
            
            #line default
            #line hidden
            this.Write(" (Alt+I)\" />\r\n                ");
            
            #line 104 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write(@"                    <div class=""row"">
                        <div class=""col-md-2"">
                            <RadzenLabel class=""rz-p-1"" for=""SearchInput"" accesskey=""i"">Filter</RadzenLabel>
                        </div>
                        <div class=""col-md-10"">
                            <RadzenTextBox @ref=""SearchInput"" TextStyle=""TextStyle.Subtitle2"" @bind-Value=@SearchTerm
                                Change=""@( () => ApplyFilter() )"" id=""SearchInput"" name=""SearchTerm""
                                Placeholder=""Filter on Leave (Alt+I)"">
                            </RadzenTextBox>
                        </div>
                    </div>
                ");
            
            #line 116 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("            </div>\r\n            } else {\r\n                ");
            
            #line 119 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write(@"                <div class=""col-md-3"">
                    <label for='ClientSearchInput' class=""sr-only"">Type to Filter</label>
                    <input @ref=""SearchInput"" class=""form-control my-1"" style=""float:right"" @bind=""@ClientSearchTerm"" id=""ClientSearchInput""
                        name=""ClientSearchTerm"" @bind:event=""oninput"" placeholder=""Filter by ");
            
            #line 123 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FilterColumns));
            
            #line default
            #line hidden
            this.Write("\" />\r\n                </div>\r\n                ");
            
            #line 125 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write(@"                    <div class=""col-md-3"">
                        <label for='ClientSearchInput' class=""sr-only"">Type to Filter</label>
                        <RadzenTextBox id=""ClientSearchInput"" class='rz-my-1' @bind-Value=""@ClientSearchTerm""
                        @oninput=@(args => OnChangeClientSearchTerm(args?.Value?.ToString()))
                            Placeholder=""Filter by ");
            
            #line 130 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FilterColumns));
            
            #line default
            #line hidden
            this.Write("\" />\r\n                    </div>\r\n                ");
            
            #line 132 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("            }\r\n    </div>\r\n</header>\r\n<main>\r\n    @if (Filtered");
            
            #line 137 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO == null && _loadFailed == true)\r\n        {\r\n        <h2 class=\"text-danger\">T" +
                    "he data failed to load\r\n            please try again in a little while..</h2>\r\n " +
                    "       ");
            
            #line 141 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("            <button class=\"btn btn-danger\" type=\"button\"\r\n            @onclick=\"@" +
                    "( () => LoadData() )\">Reload</button>\r\n        ");
            
            #line 144 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("            <RadzenButton Text=\"Reload\" ButtonStyle=\"ButtonStyle.Danger\" Click=\"@" +
                    "(() => LoadData())\" />\r\n        ");
            
            #line 146 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("        <h6 class=\"text-danger\">@ExceptionMessage</h6>\r\n    }\r\n    else if (Filte" +
                    "red");
            
            #line 149 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO == null)\r\n            {\r\n            ");
            
            #line 151 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("            <div style=\"display:normal;margin:auto\"\r\n                class=\"loade" +
                    "r\"></div>\r\n            ");
            
            #line 154 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("                <RadzenProgressBarCircular ProgressBarStyle=\"ProgressBarStyle.Dan" +
                    "ger\" Value=\"100\" ShowValue=\"false\"\r\n                    Mode=\"ProgressBarMode.In" +
                    "determinate\" />\r\n            ");
            
            #line 157 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("            }\r\n    else if (Filtered");
            
            #line 159 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO.Count ==\r\n        0)\r\n        {\r\n        <p>No ");
            
            #line 162 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" match the\r\n                criteria</p>\r\n        ");
            
            #line 164 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("        <button type=\"button\" @onclick=\"AddNew");
            
            #line 165 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("\"\r\n            class=\"btn btn-outline-primary btn-lg\">\r\n            Add Record \r\n" +
                    "            <i class=\"bi bi-plus-square\"></i>\r\n        </button>\r\n        ");
            
            #line 170 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("            <RadzenButton Shade=\"Shade.Dark\" Text=\"Add Record\" ButtonStyle=\"Butto" +
                    "nStyle.Dark\" Size=\"ButtonSize.Large\"\r\n        Click=\"@(() => AddNew");
            
            #line 172 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("())\" Icon=\"add_circle\"/>\r\n        ");
            
            #line 173 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("        }\r\n    else\r\n    {\r\n    ");
            
            #line 177 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("    <table style=\"font-size:x-large\" class=\"table table-bordered table-striped ta" +
                    "ble-sm table-responsive-sm\">\r\n        <thead>\r\n            <tr>\r\n               " +
                    " ");
            
            #line 181 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 foreach (var property in DatabaseColumns) { 
            
            #line default
            #line hidden
            this.Write("                    ");
            
            #line 182 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (property.Sort) {
                        
            
            #line default
            #line hidden
            this.Write("                        <th>\r\n                            ");
            
            #line 185 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("                            <button type=\"button\" class=\"btn btn-sm btn-outline-s" +
                    "econdary\"\r\n                                @onclick=\"@(() => Sort");
            
            #line 187 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(\"");
            
            #line 187 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(@"""))"">
                                <i class=""bi bi-sort-alpha-up""></i>
                            </button>
                            <button type=""button"" class=""btn btn-sm btn-outline-secondary""
                                @onclick=""@(() => Sort");
            
            #line 191 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(\"");
            
            #line 191 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(" Desc\"))\">\r\n                                <i class=\"bi bi-sort-alpha-up-alt\"></" +
                    "i>\r\n                            </button>\r\n                            ");
            
            #line 194 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("                                <RadzenButton ButtonStyle=\"ButtonStyle.Base\" Icon" +
                    "=\"sort_by_alpha\"\r\n                                    Click=\"@(() => Sort");
            
            #line 196 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(\"");
            
            #line 196 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\"))\" />\r\n                                <RadzenButton ButtonStyle=\"ButtonStyle.B" +
                    "ase\" Icon=\"swap_vert\"\r\n                                    Click=\"@(() => Sort");
            
            #line 198 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(\"");
            
            #line 198 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write(" Desc\"))\" />\r\n                            ");
            
            #line 199 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("                            ");
            
            #line 200 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write("\r\n                        </th>\r\n                        ");
            
            #line 202 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                            <th>\r\n                                ");
            
            #line 204 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Label));
            
            #line default
            #line hidden
            this.Write("\r\n                            </th>\r\n                            ");
            
            #line 206 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } } 
            
            #line default
            #line hidden
            this.Write("                            <th>\r\n                            ");
            
            #line 208 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("                              <button type=\"button\" accesskey=\"+\"\r\n              " +
                    "                      @onclick=\"AddNew");
            
            #line 210 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("\" class=\"btn btn-outline-success btn-sm w-100\">\r\n                                " +
                    "    Create\r\n                                    <i class=\"bi bi-plus-square\"></i" +
                    ">\r\n                              </button>\r\n                            ");
            
            #line 214 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                                <RadzenButton Style=\"color:white\" Shade=\"Shade.Da" +
                    "rk\" Text=\"Add Record\" ButtonStyle=\"ButtonStyle.Dark\" Size=\"ButtonSize.Small\" Ico" +
                    "n=\"add_circle\"\r\n                            Click=\"@(() => AddNew");
            
            #line 216 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("())\"/>\r\n                            ");
            
            #line 217 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("                            </th>\r\n                    </tr>\r\n                </t" +
                    "head>\r\n                <tbody>\r\n                    @foreach (var ");
            
            #line 222 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(" in Filtered");
            
            #line 222 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("DTO)\r\n                            {\r\n                            <tr>\r\n          " +
                    "                      ");
            
            #line 225 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 foreach (var property in DatabaseColumns)
                                    { 
            
            #line default
            #line hidden
            this.Write("                                    ");
            
            #line 227 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if
                                        (property.PropertyName==PrimaryKeyName)
                                        { 
            
            #line default
            #line hidden
            this.Write("<td style=\"cursor:pointer\" @onclick=\"@(() => Edit");
            
            #line 230 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 230 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 230 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("))\">\r\n    ");
            
            #line 231 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("    <button type=\"button\" class=\"btn btn-sm btn-link\">\r\n        @");
            
            #line 233 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 233 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("\r\n    </button>\r\n    ");
            
            #line 235 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                        <RadzenButton ButtonStyle=\"ButtonStyle.Light\" Size=\"Butto" +
                    "nSize.Small\" Text=\"@");
            
            #line 236 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 236 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write(".ToString()\"\r\n                            Click=\"@(() => Edit");
            
            #line 237 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 237 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 237 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("))\" />\r\n    ");
            
            #line 238 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("</td>\r\n");
            
            #line 240 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("    <td>\r\n        @");
            
            #line 242 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 242 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyName));
            
            #line default
            #line hidden
            this.Write("\r\n    </td>\r\n    ");
            
            #line 244 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } }
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 245 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write("        <td class=\"btn-group-vertical border border-1\" style=\'width:100%\'>\r\n     " +
                    "       <button type=\"button\" class=\"btn btn-sm btn-outline-warning\"\r\n           " +
                    "     @onclick=\"@(() => Edit");
            
            #line 248 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 248 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 248 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("))\">\r\n                Edit\r\n                <i class=\"bi bi-pencil-square\"></i>\r\n" +
                    "            </button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-o" +
                    "utline-danger\"\r\n                @onclick=\"@(() => Delete");
            
            #line 253 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 253 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 253 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("))\">\r\n                Delete\r\n                <i class=\"bi bi-trash\"></i>\r\n      " +
                    "      </button>\r\n        </td>\r\n        ");
            
            #line 258 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"                        <td>
                        <RadzenStack Orientation=""Orientation.Horizontal"" AlignItems=""AlignItems.Center"" Gap=""1rem"" Wrap=""FlexWrap.Wrap"">
                        <RadzenButton Style=""color:black"" Shade=""Shade.Dark"" Text=""Edit"" ButtonStyle=""ButtonStyle.Warning"" Icon=""edit""
                            Click=""@(() => Edit");
            
            #line 262 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 262 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 262 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("))\" Size=\"ButtonSize.Small\"/>\r\n\r\n                        <RadzenButton Shade=\"Sha" +
                    "de.Dark\" Text=\"Delete\" ButtonStyle=\"ButtonStyle.Danger\" Icon=\"delete\"\r\n         " +
                    "                   Click=\"@(() => Delete");
            
            #line 265 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 265 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameCamelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 265 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("))\" Size=\"ButtonSize.Small\"/>\r\n                        </RadzenStack>\r\n          " +
                    "              </td>\r\n            ");
            
            #line 268 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("            </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n    ");
            
            #line 273 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("}\r\n</main>\r\n");
            
            #line 276 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseBlazored) {
            
            #line default
            #line hidden
            this.Write("@if (ShowEdit)\r\n{\r\n");
            
            #line 279 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write(@"    <dialog open=""true"" style=""position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw"" class=""border border-danger"">
    <button class=""btn btn-outline-secondary m-2"" style=""float:right"" type=""button""
        @onclick=""@( ( ) => ToggleModal(  ) )"">x
    </button>
    <div>
        <");
            
            #line 285 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("AddEdit Title=\"@EditTitle\" ");
            
            #line 285 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("=\"@");
            
            #line 285 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("Id\" CloseModal=\"@CloseModalAsync\" />\r\n    </div>\r\n</dialog>\r\n");
            
            #line 288 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"    <dialog open=""true"" style=""position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw;max-height:600px""
        class=""border border-danger rz-layout"">
        <div style=""min-width:80vw"">
        <RadzenStack Orientation=""Orientation.Vertical"">
                <div class='row'>
                    <div class='col-md-11'>
                        <h1>@EditTitle</h1>
                    </div>
                    <div class='col-md-1'>
                        <RadzenButton Text=""x"" ButtonStyle=""ButtonStyle.Secondary"" Click=""@ToggleModal"" />
                    </div>
                </div>
            <");
            
            #line 301 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("AddEdit Title=\"@EditTitle\" ");
            
            #line 301 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyName));
            
            #line default
            #line hidden
            this.Write("=\"@");
            
            #line 301 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelName));
            
            #line default
            #line hidden
            this.Write("Id\" CloseModal=\"@CloseModalAsync\" />\r\n        </RadzenStack>\r\n        </div>\r\n   " +
                    " </dialog>    \r\n");
            
            #line 305 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("}\r\n@if (ShowDeleteConfirm)\r\n{\r\n");
            
            #line 309 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 if (!UseRadzen) {
            
            #line default
            #line hidden
            this.Write(@"<dialog open=""true"" style=""position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw"" class=""border border-danger"">
    <button class=""btn btn-outline-secondary m-2"" style=""float:right"" type=""button""
        @onclick=""@( ( ) => ToggleShowDeleteConfirm(  ) )"">x
    </button>
    <BlazoredModalConfirmDialogMVC
        Confirm=""@CloseConfirmDeletion""
        ButtonColour=""danger""
        Icon=""bi bi-trash""
        Message=""Please confirm that you wish to delete a record.""
        Title=""Deletion Confirmation ");
            
            #line 319 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" Table\" />\r\n    <form method=\"dialog\">\r\n    </form>\r\n</dialog>\r\n");
            
            #line 323 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"<dialog open=""true"" style=""position:absolute;left: 0px;top: 200px;z-index: 900;width:90vw;max-height:300px""
        class=""border border-danger rz-layout"">
        <RadzenStack Orientation=""Orientation.Vertical"">
            <RadzenStack Orientation=""Orientation.Horizontal"">
                <div class='row'>
                    <div class='col-md-10'>
                        <h3>Deletion Confirmation ");
            
            #line 330 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(@" Table</h3>
                    </div>
                    <div class='col-md-2'>
                        <RadzenButton Text=""x"" ButtonStyle=""ButtonStyle.Secondary""
                            Click=""@ToggleShowDeleteConfirm"" />
                    </div>
                </div>
            </RadzenStack>
            <BlazoredModalConfirmDialogMVC Confirm=""CloseConfirmDeletion"" ButtonColour=""danger"" Icon=""bi bi-trash""
                Message=""@message"" Title=""Deletion Confirmation ");
            
            #line 339 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNameWithSpaces));
            
            #line default
            #line hidden
            this.Write(" Table\" />\r\n        </RadzenStack>\r\n</dialog>\r\n");
            
            #line 342 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 344 "C:\Users\MPhil\source\repos\BlazorCRUD_UIGenerator\DynamicCRUD\T4Templates\GenericTable.tt"
 }
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class GenericTableBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
