@page "/DynamicTable"
@using System.Data
@using BlazorAppEditTable.Services;
@if (!string.IsNullOrWhiteSpace(ExceptionMessage))
{
    <div>
        <i class="fa-solid fa-triangle-exclamation"></i>
        <div class="alert alert-warning  alert-dismissible fade show" role="alert">
            <strong>Exception!</strong> <span>@ExceptionMessage</span>
        </div>
    </div>
}


@if (Show && Columns != null)
{
    <div class="row">
        <div class="col-md-3">
            <h5 class="page-title m-1">@Title</h5>
        </div>
        @if (allowFilter)
        {
            <div class="col-md-3">
                <div class="row">
                    <div class="col-10">
                        <textarea rows="1" cols="100" class="form-control form-control-sm my-1" @bind="Sql" type="text" required ></textarea>
                    </div>
                    <div class="col-2">
                        <button class="btn btn-success btn-sm" title="Rerun SQL" type="button" @onclick="@( ( ) => LoadData(  ) )">
                            <i class="fa-solid fa-rotate"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="row">
                    <div class="col-8">
                        <label class="my-1 fs-7">Field # To Filter</label>
                    </div>
                    <div class="col-4">
                        <input class="form-control form-control-sm my-1" @bind="filterField" type="number" required max="@Columns.Count()" min="1" />
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <input @ref="SearchInput" accesskey="i" class="form-control form-control-sm my-1" @bind="@SearchTerm"
                @bind:event="oninput" id="SearchInput" name="SearchTerm" placeholder="Filter Text or Int (Alt+I)" />
            </div>
        }
        <div class="col-md-2">
            <button id="CloseButton" type="button" accesskey="c" class="btn btn-outline-primary btn-sm my-1" @onclick="@Close">
                Select a Different Table
                <i class="fa-solid fa-table-list"></i>
            </button>
        </div>
    </div>

    @if (FilteredDataTable == null && _loadFailed == true)
    {
        <h2 class="text-danger">The data failed to load please try again in a little while..</h2>
        <button class="btn btn-outline-danger" type="button" @onclick="@( () => LoadData() )">Reload</button>
        <h6 class="text-danger">@ExceptionMessage</h6>
    }
    else if (FilteredDataTable == null || Columns == null)
    {
        <div style="display:normal;margin:auto" class="loader"></div>
    }
    else if (FilteredDataTable.Rows.Count == 0)
    {
        <p>No Dynamic Table match the criteria</p>
        <button type="button" @onclick="AddNewDynamicTableAsync" accesskey="+" class="btn btn-outline-success">Add Record <i class="fas fa-plus"></i></button>
    }
    else if (PrimaryKeyName == null || FilteredDataTable == null)
    {
        <p> Table data not loaded</p>
    }
    else
    {
        <EditForm Model="@FilteredDataTable" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <table class="table table-bordered table-striped table-sm table-responsive-sm">
                <thead>
                    <tr>
                        @foreach (DynamicDatabaseColumn column in Columns.Where(v => v.DataType != null && v.Hide == false).Take(maxColumns))
                        {
                            <th title="@column.DataType Click to Sort" @onclick="@( ( ) => Sort( column.ColumnName ))">
                                @column.Label
                                @if (column.Required)
                                {
                                    <span>&nbsp;<i class="fa-solid fa-asterisk text-danger"></i></span>
                                }
                            </th>
                        }
                        <th>
                            <button type="button" @onclick="AddNewDynamicTableAsync" class="btn btn-outline-success btn-sm"><i class="fas fa-plus"></i></button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        currentRow = 0;
                    }
                    @foreach (DataRow row in FilteredDataTable.Rows)
                    {
                        currentRow++;
                        int rowActual = currentRow;
                        <tr>
                            @foreach (DynamicDatabaseColumn col in Columns.Where(v => v.DataType != null && v.Hide == false).Take(maxColumns))
                            {
                                readOnly = false;
                                <td>
                                    @if (col.ColumnName == PrimaryKeyName)
                                    {
                                        readOnly = true;
                                    }
                                    @if (col != null && col?.DataType != null)
                                    {
                                        @if (row.RowState == DataRowState.Deleted)
                                        {
                                            <span style="text-decoration:line-through">#deleted#</span>
                                        }
                                        else if (col.DataType.ToLower().Contains("nvarchar"))
                                        {
                                            <input class="form-control form-control-sm" type="text" style="text-align:left" name="@col.ColumnName" id="@(currentRow.ToString())_@col.ColumnName"
                                                   value="@row[col.ColumnName].ToString()" placeholder="@col.HelpText" readonly="@readOnly"
                                                   required="@col.Required" aria-label="@col.ColumnName"
                                            @onchange="@((ChangeEventArgs __e) => DataTableBind(__e,@row[col.ColumnName].ToString(),rowActual,col.ColumnName))"
                                            @oninput="@(() => CallChangeAsync(currentRow.ToString() + "_" + @col.ColumnName))" />
                                        }
                                        else if (col.DataType.ToLower().Contains("bit"))
                                        {
                                            string checkedState = "checked";
                                            if (row[col.ColumnName].ToString()?.ToLower() != "true")
                                            {
                                                checkedState = "";
                                            }
                                            <input class="form-checkbox form-checkbox-sm" type="checkbox" name="@col.ColumnName" id="@(currentRow.ToString())_@col.ColumnName"
                                                   placeholder="@col.HelpText" readonly="@readOnly"
                                                   checked="@(checkedState)" aria-label="@col.ColumnName"
                                            @onchange="@((ChangeEventArgs __e) => DataTableBind(__e,@row[col.ColumnName].ToString(),rowActual,col.ColumnName))"
                                            @oninput="@(() => CallChangeAsync(currentRow.ToString() + "_" + @col.ColumnName))" />
                                        }
                                        else if (col.DataType.ToLower().Contains("date"))
                                        {
                                            string result = row[col.ColumnName].ToString() ?? "";
                                            string rawResult = row[col.ColumnName].ToString() ?? "";
                                            if (result?.Length == 19)//UK format?
                                            {
                                                result = result.Substring(6, 4) + "-" + result.Substring(3, 2) + "-" +
                                                result.Substring(0, 2);
                                            }
                                            else if (result?.Length == 20)//USA format?
                                            {
                                                var dateParts = result.Split("/");
                                                var year = dateParts[2].Substring(0, 4);
                                                var month = dateParts[0].Length == 2 ? dateParts[0] : "0" + dateParts[0];
                                                var day = dateParts[1].Length == 2 ? dateParts[1] : "0" + dateParts[1];
                                                result = year + "-" + month + "-" + day;
                                            }
                                            else
                                            {
                                                result = "";
                                            }
                                            <div class="row">
                                                <div class="col-7">
                                                    <input class="form-control form-control-sm valid"
                                                           type="date" name="@col.ColumnName" id="@col.ColumnName"
                                                           value="@result"
                                                           placeholder="@col.HelpText" readonly="@readOnly" required="@col.Required" aria-label="@col.ColumnName"
                                                    @onchange="@((ChangeEventArgs __e) => DataTableBind(__e,@row[col.ColumnName].ToString(),rowActual,col.ColumnName))"
                                                    @oninput="@(() => CallChangeAsync(currentRow.ToString() + "_" + @col.ColumnName))" />
                                                </div>
                                                <div class="col-5">
                                                    <label style="font-size:x-small">@rawResult</label>
                                                </div>
                                            </div>
                                        }
                                        else if (col.DataType.ToLower() == "int" || col.DataType.ToLower() == "float"
                                        || col.DataType.ToLower() == "decimal" || col.DataType.ToLower() == "bigint"
                                        || col.DataType.ToLower() == "smallint")
                                        {
                                            <input class="form-control form-control-sm" type="number"
                                                   name="@col.ColumnName" id="@(currentRow.ToString())_@col.ColumnName" style="text-align:right" value="@row[col.ColumnName].ToString()" placeholder="@col.HelpText" readonly="@readOnly" required="@col.Required" aria-label="@col.ColumnName"
                                            @onchange="@((ChangeEventArgs __e) => DataTableBind(__e,@row[col.ColumnName].ToString(),rowActual,col.ColumnName))"
                                            @oninput="@(() => CallChangeAsync(currentRow.ToString() + "_" + @col.ColumnName))" />
                                        }
                                    }
                                </td>
                            }
                            <td class="btn-group">
                                @if (row.RowState != DataRowState.Deleted)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CopyDynamicTableAsync(row[PrimaryKeyName]))">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(() => ConfirmDelete(row[PrimaryKeyName]))">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => UpdateRecordAsync(row))">
                                    <i class="fa-regular fa-floppy-disk"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row">
                <div class="col-8">
                    @if (!string.IsNullOrWhiteSpace(Message))
                    {
                        <div class="alert alert-info  alert-dismissible fade show" role="alert">
                            <strong>Message</strong> <span style="font-size:xx-small">@Message</span>
                            <button type="button" @onclick="ResetMessage" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                </div>
                <div class="col-2">
                    <button disabled="@disableSave" accesskey="s" type="submit" class="btn btn-sm btn-outline-primary"><u>S</u>ave All</button>
                </div>
            </div>
        </EditForm>
    }
}
else
{
    @if (tables != null)
    {
        <h1> Database Tables</h1>
        <div class="row">
            <div class="col-1">
                <label class="label-control">Filter Tables</label>
            </div>
            <div class="col-md-2">
                <input @ref="SearchInput" class="form-control form-control-sm my-1" @bind="@SearchTable"
                @bind:event="oninput" id="SearchInput" name="SearchTable" placeholder="Filter Tables" />
            </div>
            <div class="col-3">
                <p> Or click on a table below</p>
            </div>
        </div>
        <div class="layout-as-cards">
            @foreach (var table in tables.Where(v => v.Tablename != null && v.Tablename.ToLower().Contains(SearchTable.ToLower())).OrderBy(v => v.Tablename))
            {
                <div class="card m-1">
                    <button class="btn btn-outline-success" type="button" @onclick="@( ( ) => SetTable( table.Tablename ) )">
                        <div class="card-body">
                            <h3 class="card-title">@table.Tablename</h3>
                        </div>
                    </button>
                </div>
            }
        </div>
    }


}
@if (showDeleteConfirmation)
{
    <dialog open="true" style="position:absolute;left: 0px;top: 200px;z-index: 900;min-width:500px" class="border border-danger">
        <p> Please confirm record deletion</p>
        <button class="btn btn-danger btn-lg" type="button" @onclick="@( ( ) => DeleteDynamicTable(  ) )">
            DELETE <i class="fa-regular fa-trash-can"></i>
        </button>
        <button class="btn btn-outline-info btn-sm" type="button" @onclick="@( ( ) => {showDeleteConfirmation= false;} )">Cancel</button>
    </dialog>
}
